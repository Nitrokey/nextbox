"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createArtifacts = exports.createJSONArtifact = exports.createHTMLArtifact = void 0;

require("core-js/modules/es.string.replace.js");

require("core-js/modules/es.array.iterator.js");

var _lodash = require("lodash");

var _constants = require("./constants");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const template = require('@bundle-stats/html-templates');

const createHTMLArtifact = jobs => {
  let output = template.replace(_constants.INITIAL_DATA_PATTERN, `window.__INITIAL_DATA__ = ${JSON.stringify(jobs)}`);
  const totalSize = (0, _lodash.get)(jobs, '0.insights.webpack.assetsSizeTotal.data.text');

  if (totalSize) {
    output = output.replace(/<title>(.*)<\/title>/, `<title>${totalSize} - $1</title>`);
  }

  return output;
};

exports.createHTMLArtifact = createHTMLArtifact;

const createJSONArtifact = (_, report) => JSON.stringify(report, null, 2);

exports.createJSONArtifact = createJSONArtifact;
const REPORT_HANDLERS = {
  [_constants.OUTPUT_TYPE_HTML]: createHTMLArtifact,
  [_constants.OUTPUT_TYPE_JSON]: createJSONArtifact
};

const createArtifacts = (jobs, report, options) => {
  const types = [...(options.html ? ['html'] : []), ...(options.json ? ['json'] : [])];
  return types.reduce((agg, type) => _objectSpread(_objectSpread({}, agg), {}, {
    [type]: {
      output: REPORT_HANDLERS[type](jobs, report),
      filename: `${_constants.OUTPUT_FILENAME}.${type}`
    }
  }), {});
};

exports.createArtifacts = createArtifacts;