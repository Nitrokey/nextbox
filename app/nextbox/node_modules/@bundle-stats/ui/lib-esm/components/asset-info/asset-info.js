import _map from "lodash/map";
import _find from "lodash/find";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';
import { getBundleModulesByChunk, getModuleFileType } from '@bundle-stats/utils';
import { Stack } from '../../layout/stack';
import { FileName } from '../../ui/file-name';
import { ComponentLink } from '../component-link';
import css from './asset-info.module.css';

var ChunkModulesLink = function ChunkModulesLink(_ref) {
  var Component = _ref.as,
      chunks = _ref.chunks,
      chunkId = _ref.chunkId,
      name = _ref.name;

  var chunk = _find(chunks, {
    id: chunkId
  });

  if (!chunk) {
    return null;
  }

  var chunkIds = _map(chunks, 'id');

  var fileType = getModuleFileType(name);
  return /*#__PURE__*/React.createElement(Component, _extends({
    className: css.viewModules
  }, getBundleModulesByChunk(chunkIds, chunkId, fileType)), "View chunk modules");
};

ChunkModulesLink.propTypes = {
  as: PropTypes.elementType.isRequired,
  chunks: PropTypes.array,
  // eslint-disable-line react/forbid-prop-types
  chunkId: PropTypes.string,
  name: PropTypes.string
};
ChunkModulesLink.defaultProps = {
  chunks: [],
  chunkId: '',
  name: ''
};
export var AssetInfo = function AssetInfo(props) {
  var className = props.className,
      chunks = props.chunks,
      item = props.item,
      labels = props.labels,
      CustomComponentLink = props.CustomComponentLink;
  return /*#__PURE__*/React.createElement(Stack, {
    space: "xsmall",
    className: cx(css.root, className)
  }, item.runs.map(function (run, index) {
    var Title = index !== 0 ? 'h4' : 'h3';
    var key = "asset-info-" + ((run == null ? void 0 : run.name) || index) + "-" + index;
    return /*#__PURE__*/React.createElement(Stack, {
      space: "xxxsmall",
      key: key
    }, /*#__PURE__*/React.createElement(Title, null, labels[index]), /*#__PURE__*/React.createElement(FileName, {
      className: css.fileName,
      as: "code",
      name: (run == null ? void 0 : run.name) || '-'
    }), index === 0 && /*#__PURE__*/React.createElement(ChunkModulesLink, {
      as: CustomComponentLink,
      chunks: chunks,
      chunkId: run == null ? void 0 : run.chunkId,
      name: run == null ? void 0 : run.name
    }));
  }));
};
AssetInfo.propTypes = {
  className: PropTypes.string,
  item: PropTypes.shape({
    runs: PropTypes.arrayOf(PropTypes.shape({
      name: PropTypes.string,
      chunkId: PropTypes.string
    }))
  }).isRequired,
  labels: PropTypes.arrayOf(PropTypes.string).isRequired,
  chunks: PropTypes.array,
  // eslint-disable-line react/forbid-prop-types
  CustomComponentLink: PropTypes.elementType
};
AssetInfo.defaultProps = {
  className: '',
  chunks: [],
  CustomComponentLink: ComponentLink
};