import _sum from "lodash/sum";
import _max from "lodash/max";
import _map from "lodash/map";
import _get from "lodash/get";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';
import * as webpack from '@bundle-stats/utils/lib-esm/webpack';
import { getBundleAssetsFileTypeComponentLink } from '@bundle-stats/utils';
import { ASSETS_SIZES_FILE_TYPE_MAP } from '../../constants';
import { HorizontalBarChart } from '../../ui/horizontal-bar-chart';
import { ComponentLink } from '../component-link';
import { getColors } from '../../utils';
import { Stack } from '../../layout/stack';
import { SummaryItem } from '../summary-item';
import css from './bundle-assets-totals-chart-bars.module.css';
export var BundleAssetsTotalsChartBars = function BundleAssetsTotalsChartBars(_ref) {
  var className = _ref.className,
      jobs = _ref.jobs,
      CustomComponentLink = _ref.customComponentLink;
  var rootClassName = cx(css.root, className);
  var items = webpack.compareBySection.sizes(jobs);
  var dataGraphs = [];
  items.forEach(function (_ref2) {
    var runs = _ref2.runs;
    runs.forEach(function (run, runIndex) {
      dataGraphs[runIndex] = [].concat(dataGraphs[runIndex] || [], [_get(run, 'value', 0)]);
    });
  });

  var maxValues = _max(_map(dataGraphs, function (values) {
    return _sum(values);
  }));

  var maxValue = _max(maxValues);

  var labels = items.map(function (_ref3) {
    var key = _ref3.key,
        label = _ref3.label;
    var fileType = ASSETS_SIZES_FILE_TYPE_MAP[key];
    var componentData = getBundleAssetsFileTypeComponentLink(fileType, label);
    return /*#__PURE__*/React.createElement(CustomComponentLink, _extends({
      className: css.itemLink
    }, componentData), label);
  });
  var colors = getColors(_max(_map(dataGraphs, function (values) {
    return values.length;
  })));

  var getTooltip = function getTooltip(itemIndex, runIndex) {
    return function () {
      return /*#__PURE__*/React.createElement(SummaryItem, {
        className: css.itemTooltip,
        id: _get(items, [itemIndex, 'key']),
        data: {
          current: _get(items, [itemIndex, 'runs', runIndex, 'value'], 0),
          baseline: _get(items, [itemIndex, 'runs', runIndex + 1, 'value'], 0)
        },
        showDelta: runIndex < jobs.length - 1,
        showBaselineValue: runIndex < jobs.length - 1,
        size: "large"
      });
    };
  };

  return /*#__PURE__*/React.createElement(Stack, {
    className: rootClassName,
    space: "medium"
  }, dataGraphs.map(function (data, runIndex) {
    var internalBuildNumber = jobs[runIndex].internalBuildNumber;
    var values = data.map(function (value, valueIndex) {
      return {
        value: value,
        color: colors[valueIndex],
        label: labels[valueIndex],
        getItemTooltip: getTooltip(valueIndex, runIndex)
      };
    });
    return /*#__PURE__*/React.createElement("div", {
      key: internalBuildNumber || runIndex,
      className: css.item
    }, /*#__PURE__*/React.createElement("h3", {
      className: css.itemTitle
    }, "Job #" + internalBuildNumber), /*#__PURE__*/React.createElement(HorizontalBarChart, {
      className: css.itemChart,
      data: {
        labels: labels,
        values: values
      },
      maxValue: maxValue
    }));
  }));
};
BundleAssetsTotalsChartBars.defaultProps = {
  className: '',
  customComponentLink: ComponentLink
};
BundleAssetsTotalsChartBars.propTypes = {
  className: PropTypes.string,
  jobs: PropTypes.arrayOf(PropTypes.shape({
    internalBuildNumber: PropTypes.number
  })).isRequired,
  customComponentLink: PropTypes.elementType
};