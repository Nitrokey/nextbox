import _get from "lodash/get";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { useMemo } from 'react';
import { compose, withProps } from 'recompose';
import * as webpack from '@bundle-stats/utils/lib-esm/webpack';
import { ASSET_ENTRY_TYPE, ASSET_FILE_TYPE, ASSET_FILTERS, getAssetEntryTypeFilters, getAssetFileTypeFilters, getFileType } from '@bundle-stats/utils';
import { withCustomSort } from '../../hocs/with-custom-sort';
import { withFilteredItems } from '../../hocs/with-filtered-items';
import { withSearch } from '../../hocs/with-search';
import { SORT_BY_NAME, SORT_BY_DELTA, SORT_BY_SIZE, SORT_BY } from './bundle-assets.constants';

var addRowFlags = function addRowFlags(_ref) {
  var items = _ref.items;
  var updatedItems = items.map(function (item) {
    var runs = item.runs;
    var isEntry = runs.map(function (run) {
      return run && run.isEntry;
    }).includes(true);
    var isInitial = runs.map(function (run) {
      return run && run.isInitial;
    }).includes(true);
    var isChunk = runs.map(function (run) {
      return run && run.isChunk;
    }).includes(true);
    var isAsset = !(isEntry || isInitial || isChunk);
    return _objectSpread(_objectSpread({}, item), {}, {
      isEntry: isEntry,
      isInitial: isInitial,
      isChunk: isChunk,
      isAsset: isAsset
    });
  });
  return {
    items: updatedItems
  };
};

var getIsNotPredictive = function getIsNotPredictive(key, runs) {
  return runs.reduce(function (agg, current, index) {
    if (agg) {
      return agg;
    }

    if (index + 1 === runs.length) {
      return agg;
    }

    if (current && runs[index + 1] && current.delta !== 0 && key !== current.name && current.name === runs[index + 1].name) {
      return true;
    }

    return agg;
  }, false);
};

var addRowIsNotPredictive = function addRowIsNotPredictive(_ref2) {
  var items = _ref2.items;
  return {
    items: items.map(function (item) {
      return _objectSpread(_objectSpread({}, item), {}, {
        isNotPredictive: getIsNotPredictive(item.key, item.runs)
      });
    })
  };
};

var getRowFilter = function getRowFilter(filters) {
  return function (item) {
    if (filters[ASSET_FILTERS.CHANGED] && !item.changed) {
      return false;
    }

    if (!(filters[ASSET_ENTRY_TYPE + "." + ASSET_FILTERS.ENTRY] && item.isEntry || filters[ASSET_ENTRY_TYPE + "." + ASSET_FILTERS.INITIAL] && item.isInitial || filters[ASSET_ENTRY_TYPE + "." + ASSET_FILTERS.CHUNK] && item.isChunk || filters[ASSET_ENTRY_TYPE + "." + ASSET_FILTERS.ASSET] && item.isAsset)) {
      return false;
    }

    if (!filters[ASSET_FILE_TYPE + "." + getFileType(item.key)]) {
      return false;
    }

    return true;
  };
};

var getCustomSort = function getCustomSort(sortId) {
  return function (item) {
    if (sortId === SORT_BY_NAME) {
      return item.key;
    }

    if (sortId === SORT_BY_DELTA) {
      return _get(item, 'runs[0].deltaPercentage', 0);
    }

    if (sortId === SORT_BY_SIZE) {
      return _get(item, 'runs[0].value', 0);
    }

    return [!item.isNotPredictive, !item.changed, !item.isInitial, !item.isEntry, !item.isChunk, item.key];
  };
};

export var enhance = compose(withProps(function (_ref3) {
  var _objectSpread2, _objectSpread3;

  var jobs = _ref3.jobs;
  var items = useMemo(function () {
    return webpack.compareBySection.assets(jobs);
  }, [jobs]);

  var defaultFilters = _objectSpread(_objectSpread((_objectSpread2 = {}, _objectSpread2[ASSET_FILTERS.CHANGED] = (jobs == null ? void 0 : jobs.length) > 1, _objectSpread2), getAssetEntryTypeFilters(true)), getAssetFileTypeFilters(true));

  var allEntriesFilters = _objectSpread(_objectSpread((_objectSpread3 = {}, _objectSpread3[ASSET_FILTERS.CHANGED] = false, _objectSpread3), getAssetEntryTypeFilters(true)), getAssetFileTypeFilters(true));

  return {
    items: items,
    totalRowCount: items.length,
    defaultFilters: defaultFilters,
    allEntriesFilters: allEntriesFilters
  };
}), // @TODO run both transformations in one pass
withProps(addRowFlags), withProps(addRowIsNotPredictive), withSearch(), withFilteredItems(getRowFilter), withCustomSort({
  sortItems: SORT_BY,
  getCustomSort: getCustomSort
}));