import _map from "lodash/map";
import _get from "lodash/get";

var _PropTypes$shape;

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { useMemo } from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';
import { ASSET_ENTRY_TYPE, ASSET_FILE_TYPE, ASSET_FILTERS, FILE_TYPE_LABELS } from '@bundle-stats/utils';
import config from '../../config.json';
import I18N from '../../i18n';
import { FlexStack } from '../../layout/flex-stack';
import { Icon } from '../../ui/icon';
import { FileName } from '../../ui/file-name';
import { Popover } from '../../ui/popover';
import { Tooltip } from '../../ui/tooltip';
import { Filters } from '../../ui/filters';
import { SortDropdown } from '../../ui/sort-dropdown';
import { EmptySet } from '../../ui/empty-set';
import { Toolbar } from '../../ui/toolbar';
import { AssetInfo } from '../asset-info';
import { ComponentLink } from '../component-link';
import { MetricsTable } from '../metrics-table';
import { MetricsTableSearch } from '../metrics-table-search';
import { MetricsTableOptions } from '../metrics-table-options';
import { MetricsTableTitle } from '../metrics-table-title';
import css from './bundle-assets.module.css';
var RUN_TITLE_CURRENT = 'Current';
var RUN_TITLE_BASELINE = 'Baseline';
var RUNS_LABELS = [RUN_TITLE_CURRENT, RUN_TITLE_BASELINE];

var getFileTypeFilters = function getFileTypeFilters(filters) {
  return Object.entries(FILE_TYPE_LABELS).map(function (_ref) {
    var _ref2;

    var id = _ref[0],
        label = _ref[1];
    return _ref2 = {}, _ref2[id] = {
      label: label,
      defaultValue: _get(filters, ASSET_FILE_TYPE + "." + id, true)
    }, _ref2;
  }).reduce(function (agg, current) {
    return _objectSpread(_objectSpread({}, agg), current);
  }, {});
};

var TooltipNotPredictive = function TooltipNotPredictive(_ref3) {
  var runs = _ref3.runs;
  return /*#__PURE__*/React.createElement("div", {
    className: css.tooltipNotPredictive
  }, /*#__PURE__*/React.createElement("p", {
    className: css.tooltipNotPredictiveText
  }, "File name is the same, but the size has changed:"), /*#__PURE__*/React.createElement("table", {
    className: css.tooltipTable
  }, /*#__PURE__*/React.createElement("tr", null, runs.map(function (_ref4, index) {
    var name = _ref4.name,
        value = _ref4.value;
    var key = index;
    return /*#__PURE__*/React.createElement("tr", {
      key: key
    }, /*#__PURE__*/React.createElement("th", null, RUNS_LABELS[index]), /*#__PURE__*/React.createElement("td", null, name), /*#__PURE__*/React.createElement("td", null, value));
  }))));
};

TooltipNotPredictive.defaultProps = {
  runs: []
};
TooltipNotPredictive.propTypes = {
  runs: PropTypes.array // eslint-disable-line react/forbid-prop-types

};

var getRenderRowHeader = function getRenderRowHeader(_ref5) {
  var labels = _ref5.labels,
      CustomComponentLink = _ref5.CustomComponentLink,
      chunks = _ref5.chunks;
  return function (item) {
    return /*#__PURE__*/React.createElement(Popover, {
      label: /*#__PURE__*/React.createElement(FileName, {
        name: item.label
      }),
      icon: /*#__PURE__*/React.createElement(FlexStack, {
        space: "xxxsmall",
        className: css.assetInfoFlags
      }, item.isNotPredictive && /*#__PURE__*/React.createElement(Tooltip, {
        className: css.notPredictive,
        title: /*#__PURE__*/React.createElement(TooltipNotPredictive, {
          runs: item.runs
        })
      }, /*#__PURE__*/React.createElement(Icon, {
        className: css.notPredictiveIcon,
        glyph: "warning"
      })), item.isChunk && /*#__PURE__*/React.createElement("span", {
        title: "Chunk",
        className: css.flagChunk
      }, "c"), item.isEntry && /*#__PURE__*/React.createElement("span", {
        title: "Entrypoint",
        className: css.flagEntry
      }, "e"), item.isInitial && /*#__PURE__*/React.createElement("span", {
        title: "Initial",
        className: css.flagInitial
      }, "i"))
    }, /*#__PURE__*/React.createElement(AssetInfo, {
      className: css.assetInfo,
      item: item,
      labels: labels,
      chunks: chunks,
      CustomComponentLink: CustomComponentLink
    }));
  };
};

export var BundleAssets = function BundleAssets(props) {
  var _jobs$, _jobs$$meta, _jobs$$meta$webpack, _ASSET_ENTRY_TYPE, _ref7;

  var className = props.className,
      jobs = props.jobs,
      items = props.items,
      updateFilters = props.updateFilters,
      resetFilters = props.resetFilters,
      resetAllFilters = props.resetAllFilters,
      totalRowCount = props.totalRowCount,
      filters = props.filters,
      hasActiveFilters = props.hasActiveFilters,
      sortItems = props.sortItems,
      sort = props.sort,
      updateSort = props.updateSort,
      search = props.search,
      updateSearch = props.updateSearch,
      CustomComponentLink = props.customComponentLink;
  var emptyMessage = /*#__PURE__*/React.createElement(EmptySet, {
    resources: "assets",
    filtered: totalRowCount !== 0,
    handleResetFilters: resetFilters,
    handleViewAll: resetAllFilters
  });
  var chunks = ((_jobs$ = jobs[0]) == null ? void 0 : (_jobs$$meta = _jobs$.meta) == null ? void 0 : (_jobs$$meta$webpack = _jobs$$meta.webpack) == null ? void 0 : _jobs$$meta$webpack.chunks) || [];
  var renderRowHeader = useMemo(function () {
    return getRenderRowHeader({
      labels: _map(jobs, 'label'),
      CustomComponentLink: CustomComponentLink,
      chunks: chunks
    });
  }, [jobs, chunks]);
  return /*#__PURE__*/React.createElement("section", {
    className: cx(css.root, className)
  }, /*#__PURE__*/React.createElement(Toolbar, {
    className: css.toolbar,
    renderActions: function renderActions(_ref6) {
      var actionClassName = _ref6.actionClassName;
      return /*#__PURE__*/React.createElement(FlexStack, {
        space: "xsmall",
        className: cx(css.dropdown, actionClassName)
      }, /*#__PURE__*/React.createElement(SortDropdown, _extends({
        items: sortItems
      }, sort, {
        onChange: updateSort
      })), /*#__PURE__*/React.createElement(MetricsTableOptions, {
        handleViewAll: resetAllFilters,
        handleResetFilters: resetFilters
      }));
    }
  }, /*#__PURE__*/React.createElement(FlexStack, null, /*#__PURE__*/React.createElement(MetricsTableSearch, {
    className: css.toolbarSearch,
    placeholder: "Search by name",
    search: search,
    updateSearch: updateSearch
  }), /*#__PURE__*/React.createElement(Filters, {
    className: css.toolbarFilters,
    filters: (_ref7 = {}, _ref7[ASSET_FILTERS.CHANGED] = {
      label: 'Changed',
      defaultValue: filters[ASSET_FILTERS.CHANGED],
      disabled: jobs.length <= 1
    }, _ref7[ASSET_ENTRY_TYPE] = (_ASSET_ENTRY_TYPE = {
      label: 'Entry type'
    }, _ASSET_ENTRY_TYPE[ASSET_FILTERS.ENTRY] = {
      label: 'Entry',
      defaultValue: _get(filters, ASSET_ENTRY_TYPE + "." + ASSET_FILTERS.ENTRY, true)
    }, _ASSET_ENTRY_TYPE[ASSET_FILTERS.INITIAL] = {
      label: 'Initial',
      defaultValue: _get(filters, ASSET_ENTRY_TYPE + "." + ASSET_FILTERS.INITIAL, true)
    }, _ASSET_ENTRY_TYPE[ASSET_FILTERS.CHUNK] = {
      label: 'Chunk',
      defaultValue: _get(filters, ASSET_ENTRY_TYPE + "." + ASSET_FILTERS.CHUNK, true)
    }, _ASSET_ENTRY_TYPE[ASSET_FILTERS.ASSET] = {
      label: 'Asset',
      defaultValue: _get(filters, ASSET_ENTRY_TYPE + "." + ASSET_FILTERS.ASSET, true)
    }, _ASSET_ENTRY_TYPE), _ref7[ASSET_FILE_TYPE] = _objectSpread({
      label: 'File type'
    }, getFileTypeFilters(filters)), _ref7),
    hasActiveFilters: hasActiveFilters,
    onChange: updateFilters
  }))), /*#__PURE__*/React.createElement("main", null, /*#__PURE__*/React.createElement(MetricsTable, {
    runs: jobs,
    items: items,
    renderRowHeader: renderRowHeader,
    emptyMessage: emptyMessage,
    showHeaderSum: true,
    title: /*#__PURE__*/React.createElement(MetricsTableTitle, {
      title: I18N.ASSETS,
      info: "(" + items.length + "/" + totalRowCount + ")",
      popoverInfo: I18N.ASSETS_INFO,
      popoverHref: config.documentation.assets
    })
  })));
};
BundleAssets.defaultProps = {
  className: '',
  totalRowCount: 0,
  hasActiveFilters: false,
  customComponentLink: ComponentLink
};
BundleAssets.propTypes = {
  className: PropTypes.string,
  jobs: PropTypes.arrayOf(PropTypes.shape({
    internalBuildNumber: PropTypes.number,
    label: PropTypes.string
  })).isRequired,
  items: PropTypes.arrayOf(PropTypes.shape({
    key: PropTypes.string,
    label: PropTypes.string,
    runs: PropTypes.arrayOf(PropTypes.shape({
      displayValue: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
      displayDelta: PropTypes.oneOfType([PropTypes.number, PropTypes.string])
    }))
  })).isRequired,
  updateFilters: PropTypes.func.isRequired,
  resetFilters: PropTypes.func.isRequired,
  resetAllFilters: PropTypes.func.isRequired,
  totalRowCount: PropTypes.number,
  filters: PropTypes.shape({
    changed: PropTypes.bool
  }).isRequired,
  hasActiveFilters: PropTypes.bool,
  sortItems: PropTypes.shape((_PropTypes$shape = {}, _PropTypes$shape[PropTypes.string] = PropTypes.shape({
    label: PropTypes.string,
    defaultDirection: PropTypes.bool
  }), _PropTypes$shape)).isRequired,
  search: PropTypes.string.isRequired,
  updateSearch: PropTypes.func.isRequired,
  sort: PropTypes.shape({
    sortBy: PropTypes.string,
    direction: PropTypes.string
  }).isRequired,
  updateSort: PropTypes.func.isRequired,
  customComponentLink: PropTypes.elementType
};