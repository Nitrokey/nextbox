import _map from "lodash/map";
import _get from "lodash/get";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { useMemo } from 'react';
import { compose, withProps } from 'recompose';
import * as webpack from '@bundle-stats/utils/lib-esm/webpack';
import { MODULE_CHUNK, MODULE_FILTERS, MODULE_FILE_TYPE, getModuleChunkFilters, getModuleFileTypeFilters, getModuleSourceFileType } from '@bundle-stats/utils';
import { withCustomSort } from '../../hocs/with-custom-sort';
import { withFilteredItems } from '../../hocs/with-filtered-items';
import { withSearch } from '../../hocs/with-search';
import { SORT_BY_NAME, SORT_BY_SIZE, SORT_BY_DELTA, SORT_BY } from './bundle-modules.constants';

var getCustomSort = function getCustomSort(sortBy) {
  return function (item) {
    if (sortBy === SORT_BY_NAME) {
      return item.key;
    }

    if (sortBy === SORT_BY_SIZE) {
      return _get(item, 'runs[0].value', 0);
    }

    if (sortBy === SORT_BY_DELTA) {
      return _get(item, 'runs[0].deltaPercentage', 0);
    }

    return [!item.changed, item.key];
  };
};

var getRowFilter = function getRowFilter(filters) {
  return function (row) {
    // Skip not changed rows
    if (filters[MODULE_FILTERS.CHANGED] && !row.changed) {
      return false;
    } // Skip not matching chunks


    if (!_get(row, 'runs[0].chunkIds', []).find(function (chunkId) {
      return filters[MODULE_CHUNK + "." + chunkId];
    })) {
      return false;
    } // Skip not matching source types


    var fileType = getModuleSourceFileType(row.key);

    if (!filters[MODULE_FILE_TYPE + "." + fileType]) {
      return false;
    }

    return true;
  };
};

export default compose(withProps(function (_ref) {
  var _jobs$, _jobs$$meta, _jobs$$meta$webpack;

  var jobs = _ref.jobs;
  var items = useMemo(function () {
    return webpack.compareBySection.allModules(jobs);
  }, [jobs]);
  var chunks = ((_jobs$ = jobs[0]) == null ? void 0 : (_jobs$$meta = _jobs$.meta) == null ? void 0 : (_jobs$$meta$webpack = _jobs$$meta.webpack) == null ? void 0 : _jobs$$meta$webpack.chunks) || [];

  var chunkIds = _map(chunks, 'id');

  var defaultFilters = _objectSpread(_objectSpread({
    changed: (jobs == null ? void 0 : jobs.length) > 1
  }, getModuleChunkFilters(chunkIds, true)), getModuleFileTypeFilters(true));

  var allEntriesFilters = _objectSpread(_objectSpread({
    changed: false
  }, getModuleChunkFilters(chunkIds, true)), getModuleFileTypeFilters(true));

  return {
    defaultFilters: defaultFilters,
    allEntriesFilters: allEntriesFilters,
    totalRowCount: items.length,
    items: items,
    chunks: chunks
  };
}), withSearch(), withFilteredItems(getRowFilter), withCustomSort({
  sortItems: SORT_BY,
  getCustomSort: getCustomSort
}));