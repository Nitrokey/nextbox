import _map from "lodash/map";
import _isEmpty from "lodash/isEmpty";
import _get from "lodash/get";

var _PropTypes$shape;

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { useCallback, useMemo, useState } from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';
import { FILE_TYPE_LABELS, MODULE_SOURCE_FILE_TYPES, MODULE_CHUNK, MODULE_FILTERS, MODULE_FILE_TYPE } from '@bundle-stats/utils';
import config from '../../config.json';
import I18N from '../../i18n';
import { ComponentLink } from '../component-link';
import { FlexStack } from '../../layout/flex-stack';
import { EmptySet } from '../../ui/empty-set';
import { FileName } from '../../ui/file-name';
import { Filters } from '../../ui/filters';
import { Popover } from '../../ui/popover';
import { SortDropdown } from '../../ui/sort-dropdown';
import { Toolbar } from '../../ui/toolbar';
import { MetricsTable } from '../metrics-table';
import { MetricsTableSearch } from '../metrics-table-search';
import { MetricsTableOptions } from '../metrics-table-options';
import { MetricsTableTitle } from '../metrics-table-title';
import { ModuleInfo } from '../module-info';
import css from './bundle-modules.module.css';

var RowHeader = function RowHeader(_ref) {
  var row = _ref.row,
      chunks = _ref.chunks,
      labels = _ref.labels,
      CustomComponentLink = _ref.CustomComponentLink;

  var chunkIds = _map(chunks, 'id');

  var _useState = useState(false),
      showPopopver = _useState[0],
      setPopover = _useState[1];

  var handleOnMouseEnter = useCallback(function () {
    return setPopover(true);
  }, [showPopopver]);
  var content = /*#__PURE__*/React.createElement(FileName, {
    name: row.label
  });
  return /*#__PURE__*/React.createElement("div", {
    onMouseEnter: handleOnMouseEnter
  }, !showPopopver ? content : /*#__PURE__*/React.createElement(Popover, {
    ariaLabel: "View module info",
    label: content
  }, function (_ref2) {
    var popoverToggle = _ref2.popoverToggle;
    return /*#__PURE__*/React.createElement(ModuleInfo, {
      className: css.namePopover,
      item: row,
      chunks: chunks,
      chunkIds: chunkIds,
      labels: labels,
      customComponentLink: CustomComponentLink,
      onClick: popoverToggle
    });
  }));
};

RowHeader.propTypes = {
  row: PropTypes.shape({
    label: PropTypes.string
  }).isRequired,
  chunks: PropTypes.arrayOf(PropTypes.shape({
    id: PropTypes.string,
    name: PropTypes.string
  })),
  labels: PropTypes.arrayOf(PropTypes.string).isRequired,
  CustomComponentLink: PropTypes.elementType.isRequired
};
RowHeader.defaultProps = {
  chunks: []
};

var getRenderRowHeader = function getRenderRowHeader(_ref3) {
  var labels = _ref3.labels,
      chunks = _ref3.chunks,
      CustomComponentLink = _ref3.CustomComponentLink;
  return function (row) {
    return /*#__PURE__*/React.createElement(RowHeader, {
      row: row,
      chunks: chunks,
      labels: labels,
      CustomComponentLink: CustomComponentLink
    });
  };
};

export var BundleModules = function BundleModules(_ref4) {
  var _objectSpread2, _ref6, _objectSpread5;

  var className = _ref4.className,
      jobs = _ref4.jobs,
      items = _ref4.items,
      chunks = _ref4.chunks,
      totalRowCount = _ref4.totalRowCount,
      updateFilters = _ref4.updateFilters,
      resetFilters = _ref4.resetFilters,
      resetAllFilters = _ref4.resetAllFilters,
      filters = _ref4.filters,
      sortItems = _ref4.sortItems,
      sort = _ref4.sort,
      updateSort = _ref4.updateSort,
      search = _ref4.search,
      updateSearch = _ref4.updateSearch,
      hasActiveFilters = _ref4.hasActiveFilters,
      CustomComponentLink = _ref4.customComponentLink;
  var rootClassName = cx(css.root, className);
  var labels = useMemo(function () {
    return _map(jobs, 'label');
  }, [jobs]);
  var renderRowHeader = useMemo(function () {
    return getRenderRowHeader({
      labels: labels,
      chunks: chunks,
      CustomComponentLink: CustomComponentLink
    });
  }, [labels, chunks]);
  var emptyMessage = /*#__PURE__*/React.createElement(EmptySet, {
    resources: "modules",
    filtered: totalRowCount !== 0,
    handleResetFilters: resetFilters,
    handleViewAll: resetAllFilters
  });

  var dropdownFilters = _objectSpread(_objectSpread((_objectSpread2 = {}, _objectSpread2[MODULE_FILTERS.CHANGED] = {
    label: 'Changed',
    defaultValue: filters.changed,
    disabled: jobs.length <= 1
  }, _objectSpread2), !_isEmpty(chunks) && (_ref6 = {}, _ref6[MODULE_CHUNK] = _objectSpread({
    label: 'Chunk'
  }, chunks.reduce(function (chunkFilters, _ref5) {
    var _objectSpread3;

    var id = _ref5.id,
        name = _ref5.name;
    return _objectSpread(_objectSpread({}, chunkFilters), {}, (_objectSpread3 = {}, _objectSpread3[id] = {
      label: name,
      defaultValue: _get(filters, MODULE_CHUNK + "." + id, true)
    }, _objectSpread3));
  }, {})), _ref6)), {}, (_objectSpread5 = {}, _objectSpread5[MODULE_FILE_TYPE] = _objectSpread({
    label: 'File type'
  }, MODULE_SOURCE_FILE_TYPES.reduce(function (agg, fileType) {
    var _objectSpread4;

    return _objectSpread(_objectSpread({}, agg), {}, (_objectSpread4 = {}, _objectSpread4[fileType] = {
      label: FILE_TYPE_LABELS[fileType],
      defaultValue: _get(filters, MODULE_FILE_TYPE + "." + fileType, true)
    }, _objectSpread4));
  }, {})), _objectSpread5));

  return /*#__PURE__*/React.createElement("div", {
    className: rootClassName
  }, /*#__PURE__*/React.createElement(Toolbar, {
    className: css.toolbar,
    renderActions: function renderActions(_ref7) {
      var actionClassName = _ref7.actionClassName;
      return /*#__PURE__*/React.createElement(FlexStack, {
        space: "xxsmall",
        className: cx(css.dropdown, actionClassName)
      }, /*#__PURE__*/React.createElement(SortDropdown, _extends({
        className: css.tableDropdown,
        items: sortItems,
        onChange: updateSort
      }, sort)), /*#__PURE__*/React.createElement(MetricsTableOptions, {
        handleViewAll: resetAllFilters,
        handleResetFilters: resetFilters
      }));
    }
  }, /*#__PURE__*/React.createElement(FlexStack, null, /*#__PURE__*/React.createElement(MetricsTableSearch, {
    className: css.toolbarSearch,
    search: search,
    updateSearch: updateSearch,
    placeholder: "Search by name"
  }), /*#__PURE__*/React.createElement(Filters, {
    className: css.tableDropdown,
    filters: dropdownFilters,
    label: "Filters (" + items.length + "/" + totalRowCount + ")",
    onChange: updateFilters,
    hasActiveFilters: hasActiveFilters
  }))), /*#__PURE__*/React.createElement(MetricsTable, {
    className: css.table,
    items: items,
    runs: jobs,
    renderRowHeader: renderRowHeader,
    emptyMessage: emptyMessage,
    showHeaderSum: true,
    title: /*#__PURE__*/React.createElement(MetricsTableTitle, {
      title: I18N.MODULES,
      info: "(" + items.length + "/" + totalRowCount + ")",
      popoverInfo: I18N.MODULES_INFO,
      popoverHref: config.documentation.modules
    })
  }));
};
BundleModules.defaultProps = {
  className: '',
  items: [],
  jobs: [],
  totalRowCount: 0,
  hasActiveFilters: false,
  customComponentLink: ComponentLink
};
BundleModules.propTypes = {
  /** Adopted child class name */
  className: PropTypes.string,

  /** Rows data */
  items: PropTypes.array,
  // eslint-disable-line react/forbid-prop-types

  /** Jobs data */
  jobs: PropTypes.array,
  // eslint-disable-line react/forbid-prop-types

  /** Chunks data */
  chunks: PropTypes.arrayOf(PropTypes.shape({
    id: PropTypes.string,
    name: PropTypes.string
  })).isRequired,

  /** total row count */
  totalRowCount: PropTypes.number,

  /** Update filters handler */
  updateFilters: PropTypes.func.isRequired,

  /** Reset filters handler */
  resetFilters: PropTypes.func.isRequired,
  resetAllFilters: PropTypes.func.isRequired,

  /** Filters data */
  filters: PropTypes.shape({
    changed: PropTypes.bool
  }).isRequired,
  hasActiveFilters: PropTypes.bool,
  sortItems: PropTypes.shape((_PropTypes$shape = {}, _PropTypes$shape[PropTypes.string] = PropTypes.shape({
    label: PropTypes.string,
    defaultDirection: PropTypes.bool
  }), _PropTypes$shape)).isRequired,
  sort: PropTypes.shape({
    sortBy: PropTypes.string,
    direction: PropTypes.string
  }).isRequired,
  updateSort: PropTypes.func.isRequired,
  search: PropTypes.string.isRequired,
  updateSearch: PropTypes.func.isRequired,
  customComponentLink: PropTypes.elementType
};