import _get from "lodash/get";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { useMemo } from 'react';
import { compose, withProps } from 'recompose';
import { PACKAGE_FILTERS } from '@bundle-stats/utils';
import * as webpack from '@bundle-stats/utils/lib-esm/webpack';
import { withCustomSort } from '../../hocs/with-custom-sort';
import { withFilteredItems } from '../../hocs/with-filtered-items';
import { withSearch } from '../../hocs/with-search';
import { SORT_BY_NAME, SORT_BY_DELTA, SORT_BY_SIZE, SORT_BY } from './bundle-packages.constants';

var getRowFilter = function getRowFilter(filters) {
  return function (item) {
    if (filters[PACKAGE_FILTERS.CHANGED] && !item.changed) {
      return false;
    }

    if (filters[PACKAGE_FILTERS.DUPLICATE] && !item.duplicate) {
      return false;
    }

    return true;
  };
};

var getCustomSort = function getCustomSort(sortId) {
  return function (item) {
    if (sortId === SORT_BY_NAME) {
      return item.key;
    }

    if (sortId === SORT_BY_DELTA) {
      return _get(item, 'runs[0].deltaPercentage', 0);
    }

    if (sortId === SORT_BY_SIZE) {
      return _get(item, 'runs[0].value', 0);
    }

    return [!item.changed, item.key];
  };
};

var addDuplicateTag = function addDuplicateTag(items, duplicatePackages) {
  return items.map(function (item) {
    return _objectSpread(_objectSpread({}, item), {}, {
      duplicate: duplicatePackages.includes(item.key)
    });
  });
};

export var enhance = compose(withProps(function (_ref) {
  var _defaultFilters, _allEntriesFilters;

  var jobs = _ref.jobs;
  var duplicatePackages = Object.values(_get(jobs, '0.insights.webpack.duplicatePackages.data', {})).flat();
  var items = useMemo(function () {
    return addDuplicateTag(webpack.compareBySection.packages(jobs), duplicatePackages);
  }, [jobs, duplicatePackages]);
  var defaultFilters = (_defaultFilters = {}, _defaultFilters[PACKAGE_FILTERS.CHANGED] = (jobs == null ? void 0 : jobs.length) > 1, _defaultFilters[PACKAGE_FILTERS.DUPLICATE] = false, _defaultFilters);
  var allEntriesFilters = (_allEntriesFilters = {}, _allEntriesFilters[PACKAGE_FILTERS.CHANGED] = false, _allEntriesFilters[PACKAGE_FILTERS.DUPLICATE] = false, _allEntriesFilters);
  return {
    totalRowCount: items.length,
    items: items,
    defaultFilters: defaultFilters,
    allEntriesFilters: allEntriesFilters
  };
}), withSearch(), withFilteredItems(getRowFilter), withCustomSort({
  sortItems: SORT_BY,
  getCustomSort: getCustomSort,
  sortBy: SORT_BY_SIZE,
  direction: SORT_BY[SORT_BY_SIZE].defaultDirection
}));