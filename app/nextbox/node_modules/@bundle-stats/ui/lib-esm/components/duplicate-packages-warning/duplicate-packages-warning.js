import React from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';
import { BUNDLE_PACKAGES_DUPLICATE, METRIC_TYPE_NUMERIC, METRIC_TYPES, getMetricRunInfo } from '@bundle-stats/utils';
import { Alert } from '../../ui/alert';
import { ComponentLink } from '../component-link';
import { Delta } from '../delta';
import css from './duplicate-packages-warning.module.css';
var numberMetric = METRIC_TYPES[METRIC_TYPE_NUMERIC];
export var DuplicatePackagesWarning = function DuplicatePackagesWarning(props) {
  var className = props.className,
      duplicatePackagesCount = props.duplicatePackagesCount,
      CustomComponentLink = props.customComponentLink;
  var metricRunInfo = getMetricRunInfo(numberMetric, duplicatePackagesCount.current, duplicatePackagesCount.baseline);
  return /*#__PURE__*/React.createElement(Alert, {
    kind: "warning",
    className: cx(css.root, className)
  }, "Bundle contains ", /*#__PURE__*/React.createElement(CustomComponentLink, BUNDLE_PACKAGES_DUPLICATE, metricRunInfo.value, metricRunInfo.delta !== 0 && /*#__PURE__*/React.createElement(Delta, {
    className: css.titleDelta,
    inverted: true,
    displayValue: metricRunInfo.displayDelta,
    deltaType: metricRunInfo.deltaType
  }), " duplicate " + (metricRunInfo.value === 1 ? 'package' : 'packages') + "."));
};
DuplicatePackagesWarning.propTypes = {
  className: PropTypes.string,
  customComponentLink: PropTypes.elementType,
  duplicatePackagesCount: PropTypes.shape({
    current: PropTypes.number,
    baseline: PropTypes.number
  }).isRequired
};
DuplicatePackagesWarning.defaultProps = {
  className: '',
  customComponentLink: ComponentLink
};