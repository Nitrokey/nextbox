function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import PropTypes from 'prop-types';
import I18N from '../../i18n';
import { Dropdown } from '../../ui/dropdown';
export var MetricsTableOptions = function MetricsTableOptions(props) {
  var className = props.className,
      handleViewAll = props.handleViewAll,
      handleResetFilters = props.handleResetFilters,
      restProps = _objectWithoutPropertiesLoose(props, ["className", "handleViewAll", "handleResetFilters"]);

  return /*#__PURE__*/React.createElement(Dropdown, _extends({
    className: className,
    glyph: "menu"
  }, restProps), function (_ref) {
    var MenuItem = _ref.MenuItem,
        menu = _ref.menu,
        menuItemClassName = _ref.menuItemClassName;

    var getButtonOnClick = function getButtonOnClick(handler) {
      return function () {
        handler();
        menu.toggle();
      };
    };

    return /*#__PURE__*/React.createElement(React.Fragment, null, handleResetFilters && /*#__PURE__*/React.createElement(MenuItem, _extends({}, menu, {
      className: menuItemClassName,
      onClick: getButtonOnClick(handleResetFilters)
    }), I18N.RESET_FILTERS), handleViewAll && /*#__PURE__*/React.createElement(MenuItem, _extends({}, menu, {
      className: menuItemClassName,
      onClick: getButtonOnClick(handleViewAll)
    }), I18N.VIEW_ALL));
  });
};
MetricsTableOptions.propTypes = {
  className: PropTypes.string,
  handleViewAll: PropTypes.func,
  handleResetFilters: PropTypes.func
};
MetricsTableOptions.defaultProps = {
  className: '',
  handleViewAll: null,
  handleResetFilters: null
};