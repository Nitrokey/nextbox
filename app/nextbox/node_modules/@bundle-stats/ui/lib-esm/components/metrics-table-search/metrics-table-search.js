import _debounce from "lodash/debounce";
import React, { useCallback, useEffect, useState } from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';
import { Icon } from '../../ui/icon';
import css from './metrics-table-search.module.css';
export var MetricsTableSearch = function MetricsTableSearch(props) {
  var className = props.className,
      placeholder = props.placeholder,
      search = props.search,
      updateSearch = props.updateSearch;
  var rootClassname = cx(css.root, className);

  var _useState = useState(search),
      value = _useState[0],
      setValue = _useState[1]; // Update local state when initial value has changed


  useEffect(function () {
    setValue(search);
  }, [search]);
  var debouncedUpdateSearch = useCallback(_debounce(updateSearch, 500), []);
  var handleChangeValue = useCallback(function (event) {
    var newValue = event.target.value;
    setValue(newValue); // Update parent state when the local value has changed

    if (newValue !== search) {
      debouncedUpdateSearch(newValue);
    }
  }, [search]);
  var handleClearValue = useCallback(function () {
    var newValue = '';
    setValue(newValue);
    updateSearch(newValue);
  }, []);
  return /*#__PURE__*/React.createElement("div", {
    className: rootClassname
  }, /*#__PURE__*/React.createElement("input", {
    className: cx('ui-input', 'ui-input--small', css.input),
    placeholder: placeholder,
    onChange: handleChangeValue,
    value: value
  }), search && /*#__PURE__*/React.createElement("button", {
    className: css.cancelButton,
    type: "button",
    onClick: handleClearValue
  }, /*#__PURE__*/React.createElement(Icon, {
    className: css.cancelButtonIcon,
    glyph: "cancel"
  })));
};
MetricsTableSearch.propTypes = {
  className: PropTypes.string,
  placeholder: PropTypes.string,
  search: PropTypes.string.isRequired,
  updateSearch: PropTypes.func.isRequired
};
MetricsTableSearch.defaultProps = {
  className: '',
  placeholder: ''
};