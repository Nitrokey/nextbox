import React from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';
import { Table } from '../../ui/table';
import { Metric } from '../metric';
import { Delta } from '../delta';
import { JobName } from '../job-name';
import { RunLabelSum } from '../run-label-sum';
import styles from './metrics-table.module.css';

var getHeaderCell = function getHeaderCell(items, showHeaderSum) {
  return function (run, index, runs) {
    var className = cx(styles.value, index ? styles.baseline : styles.current);

    if (!run) {
      return {
        children: '-',
        className: className
      };
    }

    var label = run.label,
        internalBuildNumber = run.internalBuildNumber;
    var jobName = /*#__PURE__*/React.createElement(JobName, {
      title: index === 0 ? 'Current' : 'Baseline',
      internalBuildNumber: internalBuildNumber,
      className: styles.jobName
    }, label);
    return {
      children: showHeaderSum ? /*#__PURE__*/React.createElement("div", {
        className: styles.tableHeaderRun
      }, jobName, /*#__PURE__*/React.createElement(RunLabelSum, {
        className: styles.tableHeaderRunMetric,
        runIndex: index,
        runCount: runs.length,
        rows: items
      })) : jobName,
      className: className
    };
  };
};

var getHeaders = function getHeaders(runs, items, showHeaderSum, title) {
  return [// Metric name column - one empty strying to render the column
  {
    children: title || ' ',
    className: styles.metricName
  }].concat(runs.map(getHeaderCell(items, showHeaderSum)));
};

var generateRowCell = function generateRowCell() {
  return function (item) {
    if (!item || typeof item.value === 'undefined') {
      return '-';
    }

    var displayValue = item.displayValue,
        deltaPercentage = item.deltaPercentage,
        displayDeltaPercentage = item.displayDeltaPercentage,
        deltaType = item.deltaType;
    return /*#__PURE__*/React.createElement(Metric, {
      value: displayValue,
      anchored: true
    }, typeof deltaPercentage === 'number' && /*#__PURE__*/React.createElement(Delta, {
      displayValue: displayDeltaPercentage,
      deltaType: deltaType
    }));
  };
};

var getRows = function getRows(runs, items, renderRowHeader) {
  return items.map(function (item, index) {
    var changed = item.changed;
    return {
      key: (item == null ? void 0 : item.key) || index,
      className: changed ? '' : styles.unchanged,
      cells: [// Metric name
      renderRowHeader(item)].concat(item.runs.map(generateRowCell()))
    };
  });
};

export var MetricsTable = function MetricsTable(_ref) {
  var className = _ref.className,
      renderRowHeader = _ref.renderRowHeader,
      runs = _ref.runs,
      items = _ref.items,
      emptyMessage = _ref.emptyMessage,
      showHeaderSum = _ref.showHeaderSum,
      headerRows = _ref.headerRows,
      title = _ref.title;
  return /*#__PURE__*/React.createElement(Table, {
    className: cx(styles.root, className, runs.length > 1 && styles.multipleRuns),
    headers: [].concat(headerRows, [getHeaders(runs, items, showHeaderSum, title)]),
    rows: getRows(runs, items, renderRowHeader),
    emptyMessage: emptyMessage
  });
};
MetricsTable.defaultProps = {
  className: '',
  renderRowHeader: function renderRowHeader(item) {
    return item.label;
  },
  emptyMessage: undefined,
  showHeaderSum: false,
  headerRows: [],
  title: ''
};
MetricsTable.propTypes = {
  className: PropTypes.string,
  renderRowHeader: PropTypes.func,
  runs: PropTypes.arrayOf(PropTypes.shape({
    internalBuildNumber: PropTypes.number
  })).isRequired,
  items: PropTypes.arrayOf(PropTypes.shape({
    key: PropTypes.string,
    label: PropTypes.string,
    runs: PropTypes.arrayOf(PropTypes.shape({
      displayValue: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
      displayDelta: PropTypes.oneOfType([PropTypes.number, PropTypes.string])
    }))
  })).isRequired,
  emptyMessage: PropTypes.element,
  showHeaderSum: PropTypes.bool,
  headerRows: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.element, PropTypes.shape({
    children: PropTypes.node
  })]))),
  title: PropTypes.element
};