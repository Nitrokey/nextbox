import _noop from "lodash/noop";
import _find from "lodash/find";
import _isEmpty from "lodash/isEmpty";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import PropTypes from 'prop-types';
import { getBundleModulesByChunk } from '@bundle-stats/utils';
import { Stack } from '../../layout/stack';
import { FileName } from '../../ui/file-name';
import { ComponentLink } from '../component-link';
import css from './module-info.module.css';
export var ModuleInfo = function ModuleInfo(props) {
  var className = props.className,
      item = props.item,
      labels = props.labels,
      chunks = props.chunks,
      chunkIds = props.chunkIds,
      CustomComponentLink = props.customComponentLink,
      onClick = props.onClick;
  return /*#__PURE__*/React.createElement(Stack, {
    space: "small",
    className: className
  }, item.runs.map(function (run, index) {
    var TitleComponent = index !== 0 ? 'h4' : 'h3';
    var key = "module-info-" + ((run == null ? void 0 : run.name) || index) + "-" + index;
    return /*#__PURE__*/React.createElement(Stack, {
      space: "xxxsmall",
      key: key
    }, /*#__PURE__*/React.createElement(TitleComponent, null, labels[index]), index === 0 && !_isEmpty(run == null ? void 0 : run.chunkIds) && /*#__PURE__*/React.createElement("div", {
      className: css.chunks
    }, /*#__PURE__*/React.createElement("strong", {
      className: css.chunksTitle
    }, "Chunks:"), run.chunkIds.map(function (chunkId) {
      var chunk = _find(chunks, {
        id: chunkId
      });

      if (!chunk) {
        return null;
      }

      return /*#__PURE__*/React.createElement(CustomComponentLink, _extends({}, getBundleModulesByChunk(chunkIds, chunkId), {
        onClick: onClick,
        className: css.chunksItem
      }), chunk.name);
    })), /*#__PURE__*/React.createElement(FileName, {
      className: css.fileName,
      as: "code",
      name: (run == null ? void 0 : run.name) || '-'
    }));
  }));
};
ModuleInfo.propTypes = {
  className: PropTypes.string,
  item: PropTypes.shape({
    key: PropTypes.string,
    runs: PropTypes.arrayOf(PropTypes.shape({
      key: PropTypes.string,
      name: PropTypes.string,
      chunkIds: PropTypes.arrayOf(PropTypes.string)
    }))
  }).isRequired,
  labels: PropTypes.arrayOf(PropTypes.string).isRequired,
  chunks: PropTypes.arrayOf(PropTypes.shape({
    id: PropTypes.string,
    name: PropTypes.string
  })),
  chunkIds: PropTypes.arrayOf(PropTypes.string),
  customComponentLink: PropTypes.elementType,
  onClick: PropTypes.func
};
ModuleInfo.defaultProps = {
  className: '',
  chunks: [],
  chunkIds: [],
  customComponentLink: ComponentLink,
  onClick: _noop
};