import _sum from "lodash/fp/sum";
import _map from "lodash/fp/map";
import _flow from "lodash/fp/flow";
import _get from "lodash/get";
import React from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';
import { METRIC_TYPE_FILE_SIZE, getGlobalMetricType, getMetricRunInfo } from '@bundle-stats/utils';
import { Delta } from '../delta';
import { Metric } from '../metric';
import css from './run-label-sum.module.css';
var METRIC_TYPE_DATA = getGlobalMetricType(null, METRIC_TYPE_FILE_SIZE);

var getRunRowsSum = function getRunRowsSum(rows, runIndex) {
  return _flow(_map(function (row) {
    return _get(row, "runs[" + runIndex + "].value", 0);
  }), _sum)(rows);
};

var Wrapper = function Wrapper(_ref) {
  var className = _ref.className,
      children = _ref.children,
      value = _ref.value;
  return /*#__PURE__*/React.createElement("div", {
    className: className
  }, /*#__PURE__*/React.createElement(Metric, {
    className: css.metric,
    formatter: METRIC_TYPE_DATA.formatter,
    value: value
  }), children);
};

Wrapper.propTypes = {
  className: PropTypes.string,
  children: PropTypes.element,
  value: PropTypes.number.isRequired
};
Wrapper.defaultProps = {
  className: '',
  children: null
};
export var RunLabelSum = function RunLabelSum(props) {
  var className = props.className,
      runIndex = props.runIndex,
      runCount = props.runCount,
      rows = props.rows;
  var rootClassName = cx(css.root, className);
  var currentRunSum = getRunRowsSum(rows, runIndex); // Do not display Delta when last run (baseline)

  if (runIndex === runCount - 1) {
    return /*#__PURE__*/React.createElement(Wrapper, {
      className: rootClassName,
      value: currentRunSum
    });
  }

  var baselineRunSum = getRunRowsSum(rows, runIndex + 1);
  var info = getMetricRunInfo(METRIC_TYPE_DATA, currentRunSum, baselineRunSum);
  return /*#__PURE__*/React.createElement(Wrapper, {
    className: rootClassName,
    value: currentRunSum
  }, /*#__PURE__*/React.createElement(Delta, {
    className: css.delta,
    displayValue: info.displayDeltaPercentage,
    deltaType: info.deltaType
  }));
};
RunLabelSum.propTypes = {
  /** Adopted child class name */
  className: PropTypes.string,

  /** Run index */
  runIndex: PropTypes.number.isRequired,

  /** Run count */
  runCount: PropTypes.number.isRequired,

  /** Rows data */
  rows: PropTypes.arrayOf(PropTypes.shape({
    key: PropTypes.string,
    runs: PropTypes.arrayOf(PropTypes.shape({
      value: PropTypes.number
    }))
  })).isRequired
};
RunLabelSum.defaultProps = {
  className: ''
};