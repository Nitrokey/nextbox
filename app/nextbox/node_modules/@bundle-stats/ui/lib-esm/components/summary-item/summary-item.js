function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';
import { getGlobalMetricType, getMetricRunInfo } from '@bundle-stats/utils';
import { Popover } from '../../ui/popover';
import { Stack } from '../../layout/stack';
import { FlexStack } from '../../layout/flex-stack';
import { Metric } from '../metric';
import { Delta } from '../delta';
import css from './summary-item.module.css';

var MetricInfo = function MetricInfo(_ref) {
  var description = _ref.description,
      url = _ref.url;

  // Workaround cases where the parent is a link
  var readMoreOnClick = function readMoreOnClick() {
    window.open(url);
  };

  return /*#__PURE__*/React.createElement(Stack, {
    space: "xxxsmall"
  }, /*#__PURE__*/React.createElement("p", null, description), url && /*#__PURE__*/React.createElement("p", null, /*#__PURE__*/React.createElement("button", {
    type: "button",
    className: css.readMoreBtn,
    onClick: readMoreOnClick
  }, "Read more")));
};

MetricInfo.propTypes = {
  description: PropTypes.string.isRequired,
  url: PropTypes.string
};
MetricInfo.defaultProps = {
  url: ''
};
export var SummaryItem = function SummaryItem(_ref2) {
  var className = _ref2.className,
      Component = _ref2.as,
      size = _ref2.size,
      id = _ref2.id,
      data = _ref2.data,
      loading = _ref2.loading,
      showDelta = _ref2.showDelta,
      showMetricDescription = _ref2.showMetricDescription,
      props = _objectWithoutPropertiesLoose(_ref2, ["className", "as", "size", "id", "data", "loading", "showDelta", "showMetricDescription"]);

  var _ref3 = data || {
    baseline: 0,
    current: 0
  },
      baseline = _ref3.baseline,
      current = _ref3.current;

  var metric = getGlobalMetricType(id);
  var runInfo = getMetricRunInfo(metric, current, baseline);
  var showMetricDescriptionTooltip = showMetricDescription && (metric == null ? void 0 : metric.description);
  var rootClassName = cx(css.root, className, css[size], showMetricDescription && css.showMetricDescription, showMetricDescriptionTooltip && css.showMetricDescription, showDelta && css.showDelta);
  return /*#__PURE__*/React.createElement(Stack, _extends({
    space: "xxxsmall",
    as: Component,
    className: rootClassName
  }, props), /*#__PURE__*/React.createElement(FlexStack, {
    as: "h3",
    space: "xxxsmall",
    className: css.title
  }, /*#__PURE__*/React.createElement("span", null, metric.label), showMetricDescriptionTooltip && /*#__PURE__*/React.createElement(Popover, {
    className: css.icon,
    icon: "help"
  }, /*#__PURE__*/React.createElement(MetricInfo, metric))), /*#__PURE__*/React.createElement(Stack, null, !loading ? /*#__PURE__*/React.createElement(Metric, {
    className: css.currentMetric,
    value: current,
    formatter: metric.formatter,
    enhanced: true,
    inline: true
  }, showDelta && /*#__PURE__*/React.createElement(Delta, {
    className: css.delta,
    displayValue: runInfo.displayDeltaPercentage,
    deltaType: runInfo.deltaType
  })) : /*#__PURE__*/React.createElement("span", {
    className: cx(css.currentMetric, css.loading)
  }), !loading ? /*#__PURE__*/React.createElement(Metric, {
    className: css.baselineMetric,
    value: baseline,
    formatter: metric.formatter
  }) : /*#__PURE__*/React.createElement("span", {
    className: cx(css.baselineMetric, css.loading)
  })));
};
SummaryItem.defaultProps = {
  className: '',
  as: 'div',
  data: null,
  size: 'medium',
  loading: false,
  showMetricDescription: false,
  showDelta: true
};
SummaryItem.propTypes = {
  /** Adopted child class name */
  className: PropTypes.string,

  /** Custom component */
  as: PropTypes.elementType,

  /** Size modifier */
  size: PropTypes.oneOf(['medium', 'large']),

  /** Metric id */
  id: PropTypes.string.isRequired,

  /** Loading flag */
  loading: PropTypes.bool,

  /** Summary data */
  data: PropTypes.object,
  // eslint-disable-line react/forbid-prop-types

  /** Show description */
  showMetricDescription: PropTypes.bool,

  /** Show delta */
  showDelta: PropTypes.bool
};