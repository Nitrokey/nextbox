import _get from "lodash/get";

var _PropTypes$shape;

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';
import { METRIC_COMPONENT_LINKS } from '@bundle-stats/utils';
import { METRICS_WEBPACK_GENERAL } from '../../constants';
import { Box } from '../../layout/box';
import { FlexStack } from '../../layout/flex-stack';
import { ComponentLink } from '../component-link';
import { SummaryItem } from '../summary-item';
import css from './summary.module.css';
export var Summary = function Summary(_ref) {
  var className = _ref.className,
      size = _ref.size,
      keys = _ref.keys,
      data = _ref.data,
      loading = _ref.loading,
      showSummaryItemDelta = _ref.showSummaryItemDelta,
      SummaryItemCustomLink = _ref.summaryItemLink;
  return /*#__PURE__*/React.createElement(Box, {
    outline: true,
    className: cx(css.root, className)
  }, /*#__PURE__*/React.createElement(FlexStack, {
    className: css.items
  }, Array.from(METRIC_COMPONENT_LINKS).filter(function (_ref2) {
    var metricId = _ref2[0];
    return keys.includes(metricId);
  }).map(function (_ref3) {
    var metricId = _ref3[0],
        metricOptions = _ref3[1];
    return /*#__PURE__*/React.createElement(SummaryItem, {
      as: function as(_ref4) {
        var itemClassName = _ref4.className,
            itemProps = _objectWithoutPropertiesLoose(_ref4, ["className"]);

        return /*#__PURE__*/React.createElement(Box, _extends({
          padding: ['xsmall', 'small'],
          className: cx(itemClassName, css.summaryItemLink)
        }, itemProps, {
          as: SummaryItemCustomLink
        }, metricOptions.link));
      },
      size: size,
      key: metricId,
      id: metricId,
      data: _get(data, metricId),
      loading: loading,
      showMetricDescription: true,
      showDelta: showSummaryItemDelta && metricOptions.showDelta !== false,
      className: css.item
    });
  })));
};
Summary.defaultProps = {
  className: '',
  data: null,
  loading: false,
  size: '',
  keys: METRICS_WEBPACK_GENERAL,
  showSummaryItemDelta: true,
  summaryItemLink: ComponentLink
};
Summary.propTypes = {
  className: PropTypes.string,
  size: PropTypes.string,
  keys: PropTypes.arrayOf(PropTypes.string),
  data: PropTypes.shape((_PropTypes$shape = {}, _PropTypes$shape[PropTypes.string] = PropTypes.shape({
    baseline: PropTypes.number,
    current: PropTypes.number
  }), _PropTypes$shape)),
  loading: PropTypes.bool,
  showSummaryItemDelta: PropTypes.bool,
  summaryItemLink: PropTypes.elementType
};