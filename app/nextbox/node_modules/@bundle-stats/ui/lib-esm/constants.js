var _SECTION_URLS;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { FILE_TYPES, SECTIONS } from '@bundle-stats/utils';
export var NO_SPACE = 'no-space';
export var SPACE_XXXSMALL = 'xxxsmall';
export var SPACE_XXSMALL = 'xxsmall';
export var SPACE_XSMALL = 'xsmall';
export var SPACE_SMALL = 'small';
export var SPACE_MEDIUM = 'medium';
export var SPACE_LARGE = 'large';
export var SPACE_XLARGE = 'xlarge';
export var SPACE_XXLARGE = 'xxlarge';
export var SPACE_XXXLARGE = 'xxxlarge';
export var SPACES = [NO_SPACE, SPACE_XXXSMALL, SPACE_XXSMALL, SPACE_XSMALL, SPACE_SMALL, SPACE_MEDIUM, SPACE_LARGE, SPACE_XLARGE, SPACE_XXLARGE, SPACE_XXXLARGE];
export var URLS = {
  OVERVIEW: '/',
  ASSETS: '/assets',
  MODULES: '/modules',
  PACKAGES: '/packages'
};
export var SECTION_URLS = (_SECTION_URLS = {}, _SECTION_URLS[SECTIONS.TOTALS] = URLS.OVERVIEW, _SECTION_URLS[SECTIONS.ASSETS] = URLS.ASSETS, _SECTION_URLS[SECTIONS.MODULES] = URLS.MODULES, _SECTION_URLS[SECTIONS.PACKAGES] = URLS.PACKAGES, _SECTION_URLS);
export var ASSETS_SIZES_FILE_TYPE_MAP = FILE_TYPES.reduce(function (agg, fileType) {
  var _objectSpread2;

  return _objectSpread(_objectSpread({}, agg), {}, (_objectSpread2 = {}, _objectSpread2["webpack.sizes.totalSizeByType" + fileType] = fileType, _objectSpread2));
}, {});
export var METRICS_WEBPACK_GENERAL = ['webpack.totalSizeByTypeALL', 'webpack.totalInitialSizeJS', 'webpack.totalInitialSizeCSS', 'webpack.cacheInvalidation'];
export var METRICS_WEBPACK_ASSETS = ['webpack.assetCount', 'webpack.chunkCount'];
export var METRICS_WEBPACK_MODULES = ['webpack.moduleCount'];
export var METRICS_WEBPACK_PACKAGES = ['webpack.packageCount', 'webpack.duplicatePackagesCount'];