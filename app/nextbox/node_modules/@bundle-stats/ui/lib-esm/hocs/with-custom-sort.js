import _orderBy from "lodash/orderBy";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { useMemo, useState } from 'react';
import PropTypes from 'prop-types';
export var withCustomSort = function withCustomSort(_ref) {
  var sortItems = _ref.sortItems,
      getCustomSort = _ref.getCustomSort,
      _ref$sortBy = _ref.sortBy,
      sortBy = _ref$sortBy === void 0 ? 'size' : _ref$sortBy,
      _ref$direction = _ref.direction,
      direction = _ref$direction === void 0 ? 'desc' : _ref$direction;
  return function (BaseComponent) {
    var WithCustomSort = function WithCustomSort(props) {
      var items = props.items;

      var _useState = useState({
        sortBy: sortBy,
        direction: direction
      }),
          sort = _useState[0],
          updateSort = _useState[1];

      var orderedItems = useMemo(function () {
        return _orderBy(items, getCustomSort(sort.sortBy), sort.direction);
      }, [items, sort.sortBy, sort.direction]);
      var otherProps = {
        sort: sort,
        updateSort: updateSort,
        sortItems: sortItems,
        items: orderedItems
      };
      return /*#__PURE__*/React.createElement(BaseComponent, _extends({}, props, otherProps));
    };

    WithCustomSort.propTypes = {
      items: PropTypes.array.isRequired // eslint-disable-line react/forbid-prop-types

    };
    return WithCustomSort;
  };
};