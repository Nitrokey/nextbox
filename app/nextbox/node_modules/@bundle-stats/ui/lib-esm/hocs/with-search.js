import _noop from "lodash/noop";
import _merge from "lodash/merge";
import _isEqual from "lodash/isEqual";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { useCallback, useEffect, useReducer } from 'react';
import PropTypes from 'prop-types';
var ACTION_SET_FILTERS = 'SET_FILTERS';
var ACTION_SET_SEARCH = 'SET_SEARCH';
var ACTION_RESET_DEFAULT = 'RESET_DEFAULT';
var ACTION_RESET_ALL = 'RESET_ALL';
var ACTION_SET = 'SET';

var getSearchPattern = function getSearchPattern(search) {
  var searchPattern = new RegExp(/.*/);

  if (!search || !search.trim()) {
    return searchPattern;
  }

  try {
    searchPattern = new RegExp(search, 'i');
  } catch (err) {
    // noop
    console.error(err); // eslint-disable-line no-console
  }

  return searchPattern;
};

var getSearchReducer = function getSearchReducer(_ref) {
  var defaultFilters = _ref.defaultFilters,
      allEntriesFilters = _ref.allEntriesFilters,
      _ref$setParentState = _ref.setParentState,
      setParentState = _ref$setParentState === void 0 ? _noop : _ref$setParentState;
  return function (state, action) {
    var type = action.type,
        payload = action.payload;

    switch (type) {
      case ACTION_SET_FILTERS:
        {
          setParentState({
            filters: payload,
            search: state.search
          });
          return _objectSpread(_objectSpread({}, state), {}, {
            filters: payload
          });
        }

      case ACTION_SET_SEARCH:
        {
          setParentState({
            filters: state.filters,
            search: payload
          });
          return _objectSpread(_objectSpread({}, state), {}, {
            search: payload,
            searchPattern: getSearchPattern(payload)
          });
        }

      case ACTION_RESET_DEFAULT:
        {
          setParentState({
            filters: defaultFilters,
            search: ''
          });
          return {
            filters: defaultFilters,
            search: '',
            searchPattern: getSearchPattern()
          };
        }

      case ACTION_RESET_ALL:
        {
          setParentState({
            filters: allEntriesFilters,
            search: ''
          });
          return {
            filters: allEntriesFilters,
            search: '',
            searchPattern: getSearchPattern()
          };
        }

      case ACTION_SET:
        {
          return payload;
        }

      default:
        return state;
    }
  };
};

export var generateState = function generateState(filters, search) {
  return {
    filters: filters,
    search: search,
    searchPattern: getSearchPattern(search)
  };
};
export var useSearch = function useSearch(_ref2) {
  var setParentState = _ref2.setState,
      parentSearch = _ref2.search,
      parentFilters = _ref2.filters,
      defaultFilters = _ref2.defaultFilters,
      allEntriesFilters = _ref2.allEntriesFilters;
  // When we pass custom filters, set the other flags to true(allEntries)
  var initialFilters = parentFilters ? _merge({}, allEntriesFilters, parentFilters) : defaultFilters;

  var _useReducer = useReducer(getSearchReducer({
    defaultFilters: defaultFilters,
    allEntriesFilters: allEntriesFilters,
    setParentState: setParentState
  }), generateState(initialFilters, parentSearch)),
      _useReducer$ = _useReducer[0],
      search = _useReducer$.search,
      searchPattern = _useReducer$.searchPattern,
      filters = _useReducer$.filters,
      dispatch = _useReducer[1]; // Update state when the custom filters/search are changing - initial load or route updates


  useEffect(function () {
    // Run a deep comparison to prevent circular setState triggering
    if (parentSearch === search || _isEqual(parentFilters, filters)) {
      return;
    }

    dispatch({
      type: ACTION_SET,
      payload: generateState(initialFilters, parentSearch)
    });
  }, [search, filters, parentFilters, parentSearch]);
  var handleUpdateSearch = useCallback(function (newValue) {
    dispatch({
      type: ACTION_SET_SEARCH,
      payload: newValue
    });
  }, []);
  var handleUpdateFilters = useCallback(function (newFilters) {
    dispatch({
      type: ACTION_SET_FILTERS,
      payload: newFilters
    });
  }, []);
  var handleResetFilters = useCallback(function () {
    dispatch({
      type: ACTION_RESET_DEFAULT
    });
  }, []);
  var handleResetAllFilters = useCallback(function () {
    dispatch({
      type: ACTION_RESET_ALL
    });
  }, []);
  return {
    search: search,
    updateSearch: handleUpdateSearch,
    searchPattern: searchPattern,
    updateFilters: handleUpdateFilters,
    resetFilters: handleResetFilters,
    resetAllFilters: handleResetAllFilters,
    filters: filters,
    hasActiveFilters: !_isEqual(allEntriesFilters, filters)
  };
};
export var withSearch = function withSearch() {
  return function (BaseComponent) {
    var WithSearch = function WithSearch(props) {
      var allEntriesFilters = props.allEntriesFilters,
          defaultFilters = props.defaultFilters,
          filters = props.filters,
          search = props.search,
          setState = props.setState;
      var searchProps = useSearch({
        search: search,
        filters: filters,
        setState: setState,
        defaultFilters: defaultFilters,
        allEntriesFilters: allEntriesFilters
      });
      return /*#__PURE__*/React.createElement(BaseComponent, _extends({}, props, searchProps));
    };

    WithSearch.defaultProps = {
      filters: null,
      setState: null,
      search: ''
    };
    WithSearch.propTypes = {
      allEntriesFilters: PropTypes.object.isRequired,
      // eslint-disable-line react/forbid-prop-types
      defaultFilters: PropTypes.object.isRequired,
      // eslint-disable-line react/forbid-prop-types
      filters: PropTypes.object,
      // eslint-disable-line react/forbid-prop-types
      search: PropTypes.string,
      setState: PropTypes.func
    };
    return WithSearch;
  };
};