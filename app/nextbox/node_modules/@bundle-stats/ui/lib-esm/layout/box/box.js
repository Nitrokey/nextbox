function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';
import { NO_SPACE, SPACES } from '../../constants';
import css from './box.module.css';
export var Box = function Box(props) {
  var className = props.className,
      Component = props.as,
      padding = props.padding,
      horizontalPadding = props.horizontalPadding,
      verticalPadding = props.verticalPadding,
      outline = props.outline,
      restProps = _objectWithoutPropertiesLoose(props, ["className", "as", "padding", "horizontalPadding", "verticalPadding", "outline"]);

  var _ref = Array.isArray(padding) ? [null].concat(padding) : [padding, verticalPadding, horizontalPadding],
      resolvedPadding = _ref[0],
      resolvedVerticalPadding = _ref[1],
      resolvedHorizontalPadding = _ref[2];

  var rootClassName = cx(css.root, className, resolvedPadding && css["padding-" + resolvedPadding], resolvedVerticalPadding && css["vertical-padding-" + resolvedVerticalPadding], resolvedHorizontalPadding && css["horizontal-padding-" + resolvedHorizontalPadding], outline && css.outline);
  return /*#__PURE__*/React.createElement(Component, _extends({
    className: rootClassName
  }, restProps));
};
Box.defaultProps = {
  className: '',
  as: 'div',
  padding: NO_SPACE,
  horizontalPadding: '',
  verticalPadding: '',
  outline: false
};
Box.propTypes = {
  /** Adopted child class name */
  className: PropTypes.string,

  /** Rendered component */
  as: PropTypes.elementType,

  /** Padding space size */
  padding: PropTypes.oneOfType([PropTypes.oneOf(SPACES), PropTypes.arrayOf(PropTypes.oneOf(SPACES))]),

  /** Horizonatl padding space size */
  horizontalPadding: PropTypes.oneOf(SPACES),

  /** Vertical padding space size */
  verticalPadding: PropTypes.oneOf(SPACES),

  /** Outline flag */
  outline: PropTypes.bool
};