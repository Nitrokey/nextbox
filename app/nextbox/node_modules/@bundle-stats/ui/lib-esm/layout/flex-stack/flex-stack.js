function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';
import { NO_SPACE, SPACES } from '../../constants';
import { getRenderChildWithClassName } from '../../utils';
import css from './flex-stack.module.css';
export var FlexStack = function FlexStack(props) {
  var Component = props.as,
      className = props.className,
      space = props.space,
      children = props.children,
      restProps = _objectWithoutPropertiesLoose(props, ["as", "className", "space", "children"]);

  var rootClassName = cx(className, css.root, css["space--" + space]);
  return /*#__PURE__*/React.createElement(Component, _extends({}, restProps, {
    className: rootClassName
  }), React.Children.map(children, getRenderChildWithClassName(css.item)));
};
FlexStack.defaultProps = {
  as: 'div',
  className: '',
  children: null,
  space: NO_SPACE
};
FlexStack.propTypes = {
  as: PropTypes.elementType,
  className: PropTypes.string,
  children: PropTypes.node,
  space: PropTypes.oneOf(SPACES)
};