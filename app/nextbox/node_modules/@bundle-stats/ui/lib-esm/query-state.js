import _merge from "lodash/merge";
import _isEqual from "lodash/isEqual";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { useCallback } from 'react';
import { Route, useHistory, useLocation } from 'react-router-dom';
import { JsonParam, QueryParamProvider, useQueryParams } from 'use-query-params';
export var QueryStateProvider = function QueryStateProvider(props) {
  var history = useHistory();
  var location = useLocation();
  return /*#__PURE__*/React.createElement(QueryParamProvider, _extends({
    ReactRouterRoute: Route,
    location: location,
    history: history
  }, props));
};
export var useComponentQueryState = function useComponentQueryState(componentName) {
  var _useQueryParams2;

  var _useQueryParams = useQueryParams((_useQueryParams2 = {}, _useQueryParams2[componentName] = JsonParam, _useQueryParams2)),
      search = _useQueryParams[0],
      setSearch = _useQueryParams[1];

  var state = search[componentName];
  var setState = useCallback(function (newState) {
    var _setSearch;

    var newComponentState = _merge({}, state, newState); // Deep check to prevent unnecessary state changes


    if (_isEqual(newComponentState, state)) {
      return;
    }

    setSearch((_setSearch = {}, _setSearch[componentName] = newComponentState, _setSearch));
  }, [state]);
  return [state, setState];
};