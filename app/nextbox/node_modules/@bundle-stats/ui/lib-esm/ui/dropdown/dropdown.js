function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';
import { useMenuState, Menu, MenuItem, MenuButton } from 'reakit/Menu';
import { FlexStack } from '../../layout/flex-stack';
import { Icon } from '../icon';
import css from './dropdown.module.css';
export var Dropdown = function Dropdown(props) {
  var className = props.className,
      label = props.label,
      ariaLabel = props.ariaLabel,
      glyph = props.glyph,
      activeLabel = props.activeLabel,
      children = props.children;
  var rootClassName = cx(css.root, activeLabel && css.activeLabel, className);
  var menu = useMenuState({
    baseId: process.env.NODE_ENV === 'test' && 'id-test',
    modal: true
  });
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MenuButton, _extends({}, menu, {
    className: rootClassName,
    tabIndex: null
  }), /*#__PURE__*/React.createElement(FlexStack, {
    space: "xxxsmall",
    className: css.label
  }, glyph && /*#__PURE__*/React.createElement(Icon, {
    className: css.labelIcon,
    glyph: glyph
  }), label)), /*#__PURE__*/React.createElement(Menu, _extends({}, menu, {
    "aria-label": ariaLabel || label,
    className: css.dropdown
  }), typeof children === 'function' ? children({
    MenuItem: MenuItem,
    menu: menu,
    menuItemClassName: css.menuItem
  }) : children));
};
Dropdown.defaultProps = {
  className: '',
  label: null,
  ariaLabel: '',
  glyph: null,
  activeLabel: false
};
Dropdown.propTypes = {
  /** Adopted child class name */
  className: PropTypes.string,

  /** Button label */
  label: PropTypes.node,

  /** Aria label */
  ariaLabel: PropTypes.string,

  /** Icon glyph */
  glyph: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),

  /** Dropdown open state */
  open: PropTypes.bool.isRequired,

  /** Active label flag */
  activeLabel: PropTypes.bool,

  /** Content */
  children: PropTypes.oneOfType([PropTypes.string, PropTypes.element, PropTypes.func]).isRequired
};