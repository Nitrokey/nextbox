import _isEqual from "lodash/isEqual";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import PropTypes from 'prop-types';

var getInitialValues = function getInitialValues(key, filters) {
  if (typeof (filters == null ? void 0 : filters.defaultValue) !== 'undefined') {
    var _ref;

    return _ref = {}, _ref[key] = filters.defaultValue, _ref;
  }

  if (typeof filters === 'object') {
    return Object.entries(filters).map(function (_ref2) {
      var groupKey = _ref2[0],
          groupFilters = _ref2[1];
      return getInitialValues([].concat(key ? [key] : [], [groupKey]).join('.'), groupFilters);
    }).reduce(function (agg, current) {
      return _objectSpread(_objectSpread({}, agg), current);
    }, {});
  }

  return {};
};

export var filtersDropdownContainer = function filtersDropdownContainer(BaseComponent) {
  var FiltersContainer = /*#__PURE__*/function (_React$Component) {
    _inheritsLoose(FiltersContainer, _React$Component);

    function FiltersContainer(props) {
      var _this;

      _this = _React$Component.call(this, props) || this;

      _defineProperty(_assertThisInitialized(_this), "toggleFilter", function (key, value) {
        return _this.setState(function (_ref3) {
          var _objectSpread2;

          var values = _ref3.values,
              state = _objectWithoutPropertiesLoose(_ref3, ["values"]);

          var newState = _objectSpread(_objectSpread({}, state), {}, {
            values: _objectSpread(_objectSpread({}, values), {}, (_objectSpread2 = {}, _objectSpread2[key] = value, _objectSpread2))
          });

          var onChange = _this.props.onChange;

          if (onChange) {
            onChange(newState.values);
          }

          return newState;
        });
      });

      var filters = _this.props.filters;
      _this.state = {
        values: getInitialValues('', filters)
      };
      return _this;
    }

    FiltersContainer.getDerivedStateFromProps = function getDerivedStateFromProps(_ref4, state) {
      var filters = _ref4.filters;

      if (_isEqual(filters, state.values)) {
        return null;
      }

      return {
        values: getInitialValues('', filters)
      };
    };

    var _proto = FiltersContainer.prototype;

    _proto.render = function render() {
      return /*#__PURE__*/React.createElement(BaseComponent, _extends({}, this.props, this.state, {
        toggleFilter: this.toggleFilter
      }));
    };

    return FiltersContainer;
  }(React.Component);

  FiltersContainer.defaultProps = {
    onChange: null
  };
  FiltersContainer.propTypes = {
    /** Filter config */
    filters: PropTypes.object.isRequired,
    // eslint-disable-line react/forbid-prop-types

    /** OnChange handler */
    onChange: PropTypes.func
  };
  return FiltersContainer;
};