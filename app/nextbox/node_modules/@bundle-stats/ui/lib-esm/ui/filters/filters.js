import _get from "lodash/get";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';
import { FlexStack } from '../../layout/flex-stack';
import { Dropdown } from '../dropdown';
import { getGroupFiltersLabelSuffix, LABELS } from './filters.utils';
import css from './filters.module.css';

var Filter = function Filter(props) {
  var className = props.className,
      label = props.label,
      name = props.name,
      getOnOnlyClick = props.getOnOnlyClick,
      inputProps = _objectWithoutPropertiesLoose(props, ["className", "label", "name", "getOnOnlyClick"]);

  var id = "filter-" + name;
  var rootClassName = cx(css.filter, className);
  return /*#__PURE__*/React.createElement("div", {
    className: rootClassName
  }, /*#__PURE__*/React.createElement(FlexStack, {
    space: "xxxsmall",
    as: "label",
    className: css.filterCheckbox
  }, /*#__PURE__*/React.createElement("input", _extends({
    className: css.filterInput,
    type: "checkbox",
    id: id,
    name: name
  }, inputProps)), /*#__PURE__*/React.createElement("span", {
    className: css.filterLabel,
    title: label
  }, label)), getOnOnlyClick && /*#__PURE__*/React.createElement("button", {
    className: css.filterOnlyButton,
    type: "button",
    onClick: getOnOnlyClick(name)
  }, "only"));
};

Filter.propTypes = {
  className: PropTypes.string,
  name: PropTypes.string.isRequired,
  label: PropTypes.string.isRequired,
  getOnOnlyClick: PropTypes.func
};
Filter.defaultProps = {
  className: '',
  getOnOnlyClick: null
};

var FilterGroup = function FilterGroup(props) {
  var groupKey = props.groupKey,
      data = props.data,
      values = props.values,
      onCheckboxChange = props.onCheckboxChange;

  var groupLabel = data.label,
      groupData = _objectWithoutPropertiesLoose(data, ["label"]);

  var groupItems = Object.entries(groupData);
  var groupCheckboxes = groupItems.filter(function (_ref) {
    var itemKey = _ref[0],
        item = _ref[1];
    return typeof (item == null ? void 0 : item.defaultValue) !== 'undefined';
  });
  var isGroupChecked = groupCheckboxes.map(function (_ref2) {
    var itemKey = _ref2[0];
    return _get(values, groupKey + "." + itemKey);
  }).reduce(function (agg, val) {
    return agg && val;
  }, true);
  var filterSuffix = getGroupFiltersLabelSuffix(groupItems);
  var hasCustomFilterSuffix = !Object.values(LABELS).includes(filterSuffix);
  var dropdownLabel = /*#__PURE__*/React.createElement(React.Fragment, null, groupLabel + ":", "\xA0", /*#__PURE__*/React.createElement("span", {
    className: cx(hasCustomFilterSuffix && css.labelSuffixCustom)
  }, filterSuffix));

  var onGroupClearAll = function onGroupClearAll() {
    groupCheckboxes.forEach(function (_ref3) {
      var itemKey = _ref3[0],
          item = _ref3[1];
      onCheckboxChange({
        target: {
          name: groupKey + "." + itemKey,
          checked: false
        }
      });
    });
  };

  var onGroupCheckAll = function onGroupCheckAll() {
    groupCheckboxes.forEach(function (_ref4) {
      var itemKey = _ref4[0],
          item = _ref4[1];
      onCheckboxChange({
        target: {
          name: groupKey + "." + itemKey,
          checked: true
        }
      });
    });
  };

  return /*#__PURE__*/React.createElement(Dropdown, {
    label: dropdownLabel,
    ariaLabel: groupLabel + ": " + filterSuffix
  }, function (_ref5) {
    var MenuItem = _ref5.MenuItem,
        menu = _ref5.menu,
        menuItemClassName = _ref5.menuItemClassName;
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
      className: css.filterGroupItems
    }, groupItems.map(function (_ref6) {
      var itemKey = _ref6[0],
          itemData = _ref6[1];
      var id = [groupKey, itemKey].join('.');

      var getOnOnlyClick = function getOnOnlyClick() {
        return function () {
          onGroupClearAll();
          onCheckboxChange({
            target: {
              name: id,
              checked: true
            }
          });
        };
      };

      var handleOnChange = function handleOnChange(data) {
        onCheckboxChange(data);
        menu.hide();
      };

      return /*#__PURE__*/React.createElement(MenuItem, _extends({
        key: id
      }, menu, {
        className: cx(menuItemClassName, css.filterGroupItem)
      }), /*#__PURE__*/React.createElement(Filter, {
        name: id,
        label: itemData.label,
        onChange: handleOnChange,
        checked: values[id],
        disabled: itemData.disabled,
        getOnOnlyClick: getOnOnlyClick
      }));
    })), /*#__PURE__*/React.createElement("div", {
      className: css.filterGroupActions
    }, isGroupChecked ? /*#__PURE__*/React.createElement(MenuItem, {
      id: "clear-all",
      as: "button",
      className: menuItemClassName,
      type: "button",
      onClick: onGroupClearAll
    }, "Clear all") : /*#__PURE__*/React.createElement(MenuItem, {
      id: "clear-all",
      as: "button",
      className: menuItemClassName,
      type: "button",
      onClick: onGroupCheckAll
    }, "Check all")));
  });
};

FilterGroup.propTypes = {
  groupKey: PropTypes.string.isRequired,
  data: PropTypes.object.isRequired,
  // eslint-disable-line react/forbid-prop-types
  values: PropTypes.object.isRequired,
  // eslint-disable-line react/forbid-prop-types
  onCheckboxChange: PropTypes.func.isRequired
};
export var Filters = function Filters(props) {
  var className = props.className,
      values = props.values,
      filters = props.filters,
      toggleFilter = props.toggleFilter;

  var onCheckboxChange = function onCheckboxChange(_ref7) {
    var target = _ref7.target;
    return toggleFilter(target.name, target.checked);
  };

  var rootClassName = cx(css.root, className);
  return /*#__PURE__*/React.createElement("form", {
    className: rootClassName
  }, /*#__PURE__*/React.createElement(FlexStack, {
    className: css.items
  }, Object.entries(filters).map(function (_ref8) {
    var name = _ref8[0],
        data = _ref8[1];

    if (typeof (data == null ? void 0 : data.defaultValue) !== 'undefined') {
      return /*#__PURE__*/React.createElement(Filter, {
        key: name,
        className: cx(css.item, css.filterStandalone),
        name: name,
        label: data.label,
        onChange: onCheckboxChange,
        checked: values[name],
        disabled: data.disabled
      });
    }

    return /*#__PURE__*/React.createElement("div", {
      className: css.item
    }, /*#__PURE__*/React.createElement(FilterGroup, {
      key: name,
      groupKey: name,
      data: data,
      values: values,
      onCheckboxChange: onCheckboxChange
    }));
  })));
};
Filters.defaultProps = {
  className: ''
};
Filters.propTypes = {
  className: PropTypes.string,
  values: PropTypes.object.isRequired,
  // eslint-disable-line react/forbid-prop-types
  filters: PropTypes.object.isRequired,
  // eslint-disable-line react/forbid-prop-types
  toggleFilter: PropTypes.func.isRequired
};