import _get from "lodash/get";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { useCallback, useState } from 'react';
import { storiesOf } from '@storybook/react';
import { getWrapperDecorator } from '../../stories';
import { Filters } from '.';
var stories = storiesOf('UI/Filters', module);
stories.addDecorator(getWrapperDecorator({
  paddingLeft: '200px'
}));

var FiltersState = function FiltersState(_ref) {
  var children = _ref.children;

  var _useState = useState({
    changed: true,
    'assetType.entrypoint': true
  }),
      values = _useState[0],
      setValues = _useState[1];

  var handleSetValues = useCallback(function (newValues) {
    setValues(_objectSpread(_objectSpread({}, values), newValues));
    console.info(newValues);
  }, [values]);
  return children(values, handleSetValues);
};

stories.add('default', function () {
  return /*#__PURE__*/React.createElement(FiltersState, null, function (values, setValues) {
    return /*#__PURE__*/React.createElement(Filters, {
      onChange: setValues,
      filters: {
        changed: {
          label: 'Changed',
          defaultValue: _get(values, 'changed', true)
        },
        fileTypes: {
          label: 'File types',
          CSS: {
            label: 'CSS',
            defaultValue: _get(values, 'fileTypes.CSS', true)
          },
          JS: {
            label: 'JS',
            defaultValue: _get(values, 'fileTypes.JS', true)
          },
          HTML: {
            label: 'HTML',
            defaultValue: _get(values, 'fileTypes.HTML', true)
          },
          OTHER: {
            label: 'Asset that is not CSS, JS or HTML',
            defaultValue: _get(values, 'fileTypes.OTHER', true)
          }
        }
      }
    });
  });
});
stories.add('overflow', function () {
  return /*#__PURE__*/React.createElement(FiltersState, null, function (values, setValues) {
    return /*#__PURE__*/React.createElement(Filters, {
      onChange: setValues,
      filters: {
        changed: {
          label: 'Changed',
          defaultValue: _get(values, 'changed', true)
        },
        chunks: _objectSpread({
          label: 'Chunks'
        }, Array(22).fill('').reduce(function (agg, value, currentIndex) {
          var _objectSpread2;

          return _objectSpread(_objectSpread({}, agg), {}, (_objectSpread2 = {}, _objectSpread2["chunk-" + currentIndex] = {
            label: "Chunk " + (currentIndex + 1),
            defaultValue: _get(values, "chunks.chunk-" + currentIndex)
          }, _objectSpread2));
        }, {}))
      }
    });
  });
});
stories.add('disable options', function () {
  return /*#__PURE__*/React.createElement(Filters, {
    onChange: function onChange(state) {
      console.log(state); // eslint-disable-line no-console
    },
    filters: {
      changed: {
        label: 'Changed',
        defaultValue: false,
        disabled: true
      },
      entrypoint: {
        label: 'Entrypoint',
        defaultValue: false
      },
      fileTypes: {
        label: 'File types',
        CSS: {
          label: 'CSS',
          defaultValue: true
        },
        JS: {
          label: 'JS',
          defaultValue: true
        },
        HTML: {
          label: 'HTML',
          defaultValue: true
        }
      }
    }
  });
});