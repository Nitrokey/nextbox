var FILTER_SUFFIX_MAX_LENGTH = 18;
var ELLIPSES = '...';
var JOIN = ', ';
export var LABELS = {
  NONE: 'none',
  ALL: 'all'
};
/**
 * @param {Array<Array>} filters
 * @return {String}
 */

export var getGroupFiltersLabelSuffix = function getGroupFiltersLabelSuffix(filters) {
  var filterCount = filters.length; // eslint-disable-next-line no-unused-vars

  var checkedFilters = filters.filter(function (_ref) {
    var _ = _ref[0],
        defaultValue = _ref[1].defaultValue;
    return defaultValue;
  });
  var filterCheckedCount = checkedFilters.length;

  if (filterCheckedCount === 0) {
    return LABELS.NONE;
  }

  if (filterCheckedCount === filterCount) {
    return LABELS.ALL;
  } // eslint-disable-next-line no-unused-vars


  var checkedFilterLabels = checkedFilters.map(function (_ref2) {
    var _ = _ref2[0],
        label = _ref2[1].label;
    return label;
  });
  var suffix = '';
  var inlinedLabelCount = 0;
  var done = false;

  for (var i = 0; !done && i < checkedFilterLabels.length && FILTER_SUFFIX_MAX_LENGTH - suffix.length >= 0; i++ // eslint-disable-line no-plusplus
  ) {
    var availableSpace = FILTER_SUFFIX_MAX_LENGTH - suffix.length;
    var label = checkedFilterLabels[i];
    var normalizedLabel = '';

    if (availableSpace - label.length >= 0) {
      // Label is fitting in the available space
      normalizedLabel = label;
    } else if (availableSpace >= 6) {
      // Available space is allowing crop
      normalizedLabel = "" + label.substr(0, availableSpace - 3) + ELLIPSES;
    } else {// noop - the label will not fit
    }

    if (normalizedLabel) {
      suffix = "" + suffix + (suffix ? JOIN : '') + normalizedLabel;
      inlinedLabelCount = i + 1;
    } else {
      done = true;
    }
  }

  var skippedLabels = filterCheckedCount - inlinedLabelCount;
  return "" + suffix + (skippedLabels > 0 ? " +" + skippedLabels : '');
};