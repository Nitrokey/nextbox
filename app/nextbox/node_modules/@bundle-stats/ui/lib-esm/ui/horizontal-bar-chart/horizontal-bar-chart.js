import _sum from "lodash/sum";
import _round from "lodash/round";
import _get from "lodash/get";

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

import React from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';
import { getColors } from '../../utils';
import { Tooltip } from '../tooltip';
import css from './horizontal-bar-chart.module.css';

var HorizontalBarChartItem = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(HorizontalBarChartItem, _React$Component);

  function HorizontalBarChartItem(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.textRef = /*#__PURE__*/React.createRef();
    _this.ref = /*#__PURE__*/React.createRef();
    _this.state = {
      isTextOverflowing: true
    };
    return _this;
  }

  var _proto = HorizontalBarChartItem.prototype;

  _proto.componentDidMount = function componentDidMount() {
    var wrapperWidth = _get(this, 'ref.current.clientWidth', 0);

    var textWidth = _get(this, 'textRef.current.scrollWidth', 0);

    if (wrapperWidth >= textWidth + 2 * 4) {
      this.setState({
        isTextOverflowing: false
      });
    }
  };

  _proto.render = function render() {
    var _this$props = this.props,
        color = _this$props.color,
        label = _this$props.label,
        getItemTooltip = _this$props.getItemTooltip,
        width = _this$props.width;
    var isTextOverflowing = this.state.isTextOverflowing;
    var tooltipContent = getItemTooltip();
    return /*#__PURE__*/React.createElement("span", {
      className: cx(css.item, isTextOverflowing && css.textOverflowed),
      style: {
        width: width,
        background: color
      },
      ref: this.ref
    }, /*#__PURE__*/React.createElement(Tooltip, {
      className: css.itemContent,
      title: tooltipContent
    }, /*#__PURE__*/React.createElement("span", {
      className: css.itemLabel,
      ref: this.textRef
    }, label)));
  };

  return HorizontalBarChartItem;
}(React.Component);

HorizontalBarChartItem.propTypes = {
  width: PropTypes.string.isRequired,
  color: PropTypes.string.isRequired,
  label: PropTypes.oneOfType([PropTypes.string, PropTypes.element]).isRequired,
  getItemTooltip: PropTypes.func
};
HorizontalBarChartItem.defaultProps = {
  getItemTooltip: function getItemTooltip() {
    return null;
  }
};

var getTotalValues = function getTotalValues(values) {
  return _sum(values.map(function (entry) {
    if (typeof entry === 'object') {
      return entry.value;
    }

    return entry;
  }));
};

export var HorizontalBarChart = function HorizontalBarChart(props) {
  var className = props.className,
      data = props.data,
      maxValue = props.maxValue;
  var labels = data.labels,
      values = data.values;
  var defaultColors = getColors(labels.length);
  var total = maxValue || getTotalValues(values);
  var entries = values.reduce(function (agg, entry, index) {
    var _ref = typeof entry === 'object' ? entry : {
      value: entry
    },
        value = _ref.value,
        _ref$color = _ref.color,
        color = _ref$color === void 0 ? defaultColors[index] : _ref$color,
        _ref$label = _ref.label,
        label = _ref$label === void 0 ? labels[index] : _ref$label,
        getItemTooltip = _ref.getItemTooltip;

    var width = _round(value / total * 100, 2) + "%";
    return [].concat(agg, [{
      value: value,
      width: width,
      color: color,
      label: label,
      getItemTooltip: getItemTooltip
    }]);
  }, []);
  return /*#__PURE__*/React.createElement("div", {
    className: cx(css.root, className)
  }, entries.map(function (_ref2, index) {
    var color = _ref2.color,
        getItemTooltip = _ref2.getItemTooltip,
        label = _ref2.label,
        width = _ref2.width;
    var key = index;
    return /*#__PURE__*/React.createElement(HorizontalBarChartItem, {
      key: key,
      width: width,
      color: color,
      label: label,
      getItemTooltip: getItemTooltip,
      className: css.item
    });
  }));
};
HorizontalBarChart.defaultProps = {
  className: '',
  maxValue: null
};
HorizontalBarChart.propTypes = {
  /** Adopted child class name */
  className: PropTypes.string,

  /** Data */
  data: PropTypes.shape({
    labels: PropTypes.arrayOf(PropTypes.string),
    values: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.shape({
      value: PropTypes.number,
      color: PropTypes.string,
      label: PropTypes.oneOfType([PropTypes.string, PropTypes.element])
    })]))
  }).isRequired,

  /** Mac value */
  maxValue: PropTypes.number
};