function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { useCallback } from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';
import { usePopoverState, Popover as UIPopover, PopoverDisclosure as UIPopoverDisclosure, PopoverArrow as UIPopoverArrow } from 'reakit/Popover';
import { Icon } from '../icon';
import css from './popover.module.css';
export var Popover = function Popover(_ref) {
  var className = _ref.className,
      icon = _ref.icon,
      label = _ref.label,
      ariaLabel = _ref.ariaLabel,
      children = _ref.children;
  var popover = usePopoverState({
    baseId: process.env.NODE_ENV === 'test' && 'id-test',
    gutter: 24,
    modal: true,
    placement: 'top'
  });
  var onCloseButtonClick = useCallback(function (event) {
    event.preventDefault();
    popover.toggle();
  }, [popover]);
  var onButtonClick = useCallback(function (event) {
    event.preventDefault();
    popover.toggle();
  }, [popover]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(UIPopoverDisclosure, _extends({
    className: cx(css.button, className)
  }, popover, {
    onClick: onButtonClick,
    "aria-label": ariaLabel
  }), icon && (typeof icon === 'string' ? /*#__PURE__*/React.createElement(Icon, {
    className: css.icon,
    glyph: icon
  }) : icon), label && /*#__PURE__*/React.createElement("span", {
    className: css.label
  }, label)), /*#__PURE__*/React.createElement(UIPopover, _extends({
    className: css.popover
  }, popover, {
    tabIndex: 0
  }), /*#__PURE__*/React.createElement(UIPopoverArrow, _extends({
    className: css.arrow
  }, popover)), typeof children === 'function' ? children({
    popoverToggle: popover.toggle
  }) : children, /*#__PURE__*/React.createElement(Icon, {
    glyph: "close",
    as: "button",
    type: "button",
    className: css.closeBtn,
    onClick: onCloseButtonClick
  })));
};
Popover.propTypes = {
  className: PropTypes.string,
  label: PropTypes.element,
  icon: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),
  children: PropTypes.oneOfType([PropTypes.string, PropTypes.element, PropTypes.func]).isRequired,
  ariaLabel: PropTypes.string
};
Popover.defaultProps = {
  className: '',
  icon: '',
  label: '',
  ariaLabel: 'View more info'
};