var _PropTypes$shape;

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';
import { Dropdown } from '../dropdown';
import { Icon } from '../icon';
import css from './sort-dropdown.module.css';
export var SortDropdown = function SortDropdown(props) {
  var className = props.className,
      label = props.label,
      items = props.items,
      sortBy = props.sortBy,
      direction = props.direction,
      onChange = props.onChange;
  var rootClassName = cx(css.root, className);
  var customLabel = items[sortBy] ? "Ordered by " + items[sortBy].label : label;
  return /*#__PURE__*/React.createElement(Dropdown, {
    className: rootClassName,
    label: customLabel,
    glyph: "sort",
    align: "right"
  }, function (_ref) {
    var MenuItem = _ref.MenuItem,
        menu = _ref.menu,
        menuItemClassName = _ref.menuItemClassName;

    var getButtonOnClick = function getButtonOnClick(newSortBy, newDirection) {
      return function () {
        onChange({
          sortBy: newSortBy,
          direction: newDirection
        });
        menu.toggle();
      };
    };

    return /*#__PURE__*/React.createElement("div", {
      className: css.items
    }, Object.entries(items).map(function (_ref2) {
      var key = _ref2[0],
          item = _ref2[1];
      var buttonProps = direction === 'asc' ? {
        className: cx(css.itemButton, css.itemAsc),
        onClick: getButtonOnClick(key, 'desc'),
        title: "Order data by " + item.label + " descending"
      } : {
        className: css.itemButton,
        onClick: getButtonOnClick(key, 'asc'),
        title: "Order data by " + item.label + " ascending"
      };
      return /*#__PURE__*/React.createElement(MenuItem, _extends({
        key: key
      }, menu, buttonProps, {
        className: cx(menuItemClassName, css.item, sortBy === key && css.active)
      }), /*#__PURE__*/React.createElement("span", {
        className: css.itemLabel
      }, item.label), /*#__PURE__*/React.createElement(Icon, {
        className: css.itemIcon,
        glyph: "arrow"
      }));
    }));
  });
};
SortDropdown.defaultProps = {
  className: '',
  label: 'Order by',
  onChange: function onChange() {},
  sortBy: '',
  direction: 'asc'
};
SortDropdown.propTypes = {
  className: PropTypes.string,
  label: PropTypes.string,
  items: PropTypes.shape((_PropTypes$shape = {}, _PropTypes$shape[PropTypes.string] = PropTypes.string, _PropTypes$shape)).isRequired,
  onChange: PropTypes.func,
  sortBy: PropTypes.string,
  direction: PropTypes.string
};