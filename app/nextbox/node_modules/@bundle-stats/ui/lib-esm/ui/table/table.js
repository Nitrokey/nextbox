import _omit from "lodash/omit";
import _last from "lodash/last";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';
import css from './table.module.css';
/**
 * Pickup column attributes
 */

var getColumnAttributes = function getColumnAttributes(headerRows, hasRowHeader, cellId) {
  if (!headerRows) {
    return {};
  }

  var headers = Array.isArray(headerRows[0]) ? _last(headerRows) : headerRows;
  var headerId = hasRowHeader ? cellId + 1 : cellId;
  var header = headers[headerId];
  return typeof header === 'object' ? _omit(header, ['children']) : {};
};

var Tr = function Tr(props) {
  var className = props.className,
      restProps = _objectWithoutPropertiesLoose(props, ["className"]);

  return /*#__PURE__*/React.createElement("tr", _extends({
    className: cx(css.row, className)
  }, restProps));
};

Tr.defaultProps = {
  className: ''
};
Tr.propTypes = {
  /** Adopted child class name */
  className: PropTypes.string
};

var Th = function Th(props) {
  var className = props.className,
      restProps = _objectWithoutPropertiesLoose(props, ["className"]);

  return /*#__PURE__*/React.createElement("th", _extends({
    className: cx(css.cell, className)
  }, restProps));
};

Th.defaultProps = {
  className: ''
};
Th.propTypes = {
  /** Adopted child class name */
  className: PropTypes.string
};

var Td = function Td(props) {
  var className = props.className,
      restProps = _objectWithoutPropertiesLoose(props, ["className"]);

  return /*#__PURE__*/React.createElement("td", _extends({
    className: cx(css.cell, className)
  }, restProps));
};

Td.defaultProps = {
  className: ''
};
Td.propTypes = {
  /** Adopted child class name */
  className: PropTypes.string
};

var renderHeaderTh = function renderHeaderTh(header, index) {
  var headerProps = _objectSpread({
    key: "header-" + index
  }, typeof header === 'object' && ! /*#__PURE__*/React.isValidElement(header) ? header : {
    children: header
  });

  return /*#__PURE__*/React.createElement(Th, headerProps);
};

export var Table = function Table(_ref) {
  var className = _ref.className,
      emptyMessage = _ref.emptyMessage,
      outline = _ref.outline,
      headers = _ref.headers,
      rows = _ref.rows;
  return /*#__PURE__*/React.createElement("table", {
    className: cx(className, css.root, outline && css.outline)
  }, (headers == null ? void 0 : headers.length) > 0 && /*#__PURE__*/React.createElement("thead", null, Array.isArray(headers[0]) ? /*#__PURE__*/React.createElement(React.Fragment, null, headers.map(function (header, index) {
    var key = "header-row-" + index;
    return /*#__PURE__*/React.createElement(Tr, {
      key: key
    }, header.map(renderHeaderTh));
  })) : /*#__PURE__*/React.createElement(Tr, {
    key: "header-row"
  }, headers.map(renderHeaderTh))), /*#__PURE__*/React.createElement("tbody", null, rows.length > 0 && rows.map(function (_ref2, index) {
    var rowCustomClassName = _ref2.className,
        _ref2$cells = _ref2.cells,
        cells = _ref2$cells === void 0 ? [] : _ref2$cells,
        _ref2$header = _ref2.header,
        header = _ref2$header === void 0 ? '' : _ref2$header,
        key = _ref2.key,
        rowProps = _objectWithoutPropertiesLoose(_ref2, ["className", "cells", "header", "key"]);

    var rowKey = "row-" + (key || index);
    return /*#__PURE__*/React.createElement(Tr, _extends({
      className: rowCustomClassName,
      key: rowKey
    }, rowProps), header && renderHeaderTh(header), cells.map(function (cell, cellIndex) {
      var cellProps = _objectSpread(_objectSpread({
        key: (cell == null ? void 0 : cell.key) || rowKey + "-" + cellIndex
      }, getColumnAttributes(headers, !!header, cellIndex)), typeof cell === 'object' && ! /*#__PURE__*/React.isValidElement(cell) ? cell : {
        children: cell
      });

      return /*#__PURE__*/React.createElement(Td, cellProps);
    }));
  }), rows.length === 0 && /*#__PURE__*/React.createElement("tr", {
    key: "row-empty"
  }, /*#__PURE__*/React.createElement(Td, {
    className: css.emptyData,
    colSpan: Array.isArray(headers[0]) ? headers[0].length : headers.length
  }, emptyMessage))));
};
Table.defaultProps = {
  className: '',
  emptyMessage: 'No entries found.',
  outline: false,
  headers: [],
  rows: []
};
Table.propTypes = {
  className: PropTypes.string,
  emptyMessage: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),
  outline: PropTypes.bool,
  headers: PropTypes.array,
  // eslint-disable-line react/forbid-prop-types
  rows: PropTypes.array // eslint-disable-line react/forbid-prop-types

};