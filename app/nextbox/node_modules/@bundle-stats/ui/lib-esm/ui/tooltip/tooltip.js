function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';
import { Tooltip as UITooltip, TooltipArrow as UITooltipArrow, TooltipReference as UITooltipReference, useTooltipState } from 'reakit/Tooltip';
import css from './tooltip.module.css';
export var Tooltip = function Tooltip(props) {
  var className = props.className,
      title = props.title,
      children = props.children,
      Component = props.as,
      ref = props.containerRef,
      restProps = _objectWithoutPropertiesLoose(props, ["className", "title", "children", "as", "containerRef"]);

  var rootClassName = cx(css.root, className);
  var tooltipProps = useTooltipState({
    baseId: process.env.NODE_ENV === 'test' && 'id-test',
    placement: 'top'
  });
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(UITooltipReference, _extends({
    as: Component,
    className: rootClassName
  }, ref ? {
    ref: ref
  } : {}, restProps, tooltipProps), children), title && /*#__PURE__*/React.createElement(UITooltip, tooltipProps, /*#__PURE__*/React.createElement(UITooltipArrow, _extends({}, tooltipProps, {
    className: css.arrow
  })), /*#__PURE__*/React.createElement("div", {
    className: css.tooltip
  }, title)));
};
Tooltip.defaultProps = {
  className: '',
  title: '',
  as: 'span',
  containerRef: null
};
Tooltip.propTypes = {
  className: PropTypes.string,
  title: PropTypes.node,
  children: PropTypes.node.isRequired,
  as: PropTypes.oneOfType([PropTypes.string, PropTypes.element, PropTypes.func]),
  containerRef: PropTypes.shape({
    current: PropTypes.object // eslint-disable-line react/forbid-prop-types

  })
};