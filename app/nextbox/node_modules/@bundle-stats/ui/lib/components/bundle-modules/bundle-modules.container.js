"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _map2 = _interopRequireDefault(require("lodash/map"));

var _get2 = _interopRequireDefault(require("lodash/get"));

var _react = require("react");

var _recompose = require("recompose");

var webpack = _interopRequireWildcard(require("@bundle-stats/utils/lib-esm/webpack"));

var _utils = require("@bundle-stats/utils");

var _withCustomSort = require("../../hocs/with-custom-sort");

var _withFilteredItems = require("../../hocs/with-filtered-items");

var _withSearch = require("../../hocs/with-search");

var _bundleModules = require("./bundle-modules.constants");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var getCustomSort = function getCustomSort(sortBy) {
  return function (item) {
    if (sortBy === _bundleModules.SORT_BY_NAME) {
      return item.key;
    }

    if (sortBy === _bundleModules.SORT_BY_SIZE) {
      return (0, _get2["default"])(item, 'runs[0].value', 0);
    }

    if (sortBy === _bundleModules.SORT_BY_DELTA) {
      return (0, _get2["default"])(item, 'runs[0].deltaPercentage', 0);
    }

    return [!item.changed, item.key];
  };
};

var getRowFilter = function getRowFilter(filters) {
  return function (row) {
    // Skip not changed rows
    if (filters[_utils.MODULE_FILTERS.CHANGED] && !row.changed) {
      return false;
    } // Skip not matching chunks


    if (!(0, _get2["default"])(row, 'runs[0].chunkIds', []).find(function (chunkId) {
      return filters["".concat(_utils.MODULE_CHUNK, ".").concat(chunkId)];
    })) {
      return false;
    } // Skip not matching source types


    var fileType = (0, _utils.getModuleSourceFileType)(row.key);

    if (!filters["".concat(_utils.MODULE_FILE_TYPE, ".").concat(fileType)]) {
      return false;
    }

    return true;
  };
};

var _default = (0, _recompose.compose)((0, _recompose.withProps)(function (_ref) {
  var _jobs$, _jobs$$meta, _jobs$$meta$webpack;

  var jobs = _ref.jobs;
  var items = (0, _react.useMemo)(function () {
    return webpack.compareBySection.allModules(jobs);
  }, [jobs]);
  var chunks = ((_jobs$ = jobs[0]) === null || _jobs$ === void 0 ? void 0 : (_jobs$$meta = _jobs$.meta) === null || _jobs$$meta === void 0 ? void 0 : (_jobs$$meta$webpack = _jobs$$meta.webpack) === null || _jobs$$meta$webpack === void 0 ? void 0 : _jobs$$meta$webpack.chunks) || [];
  var chunkIds = (0, _map2["default"])(chunks, 'id');

  var defaultFilters = _objectSpread(_objectSpread({
    changed: (jobs === null || jobs === void 0 ? void 0 : jobs.length) > 1
  }, (0, _utils.getModuleChunkFilters)(chunkIds, true)), (0, _utils.getModuleFileTypeFilters)(true));

  var allEntriesFilters = _objectSpread(_objectSpread({
    changed: false
  }, (0, _utils.getModuleChunkFilters)(chunkIds, true)), (0, _utils.getModuleFileTypeFilters)(true));

  return {
    defaultFilters: defaultFilters,
    allEntriesFilters: allEntriesFilters,
    totalRowCount: items.length,
    items: items,
    chunks: chunks
  };
}), (0, _withSearch.withSearch)(), (0, _withFilteredItems.withFilteredItems)(getRowFilter), (0, _withCustomSort.withCustomSort)({
  sortItems: _bundleModules.SORT_BY,
  getCustomSort: getCustomSort
}));

exports["default"] = _default;