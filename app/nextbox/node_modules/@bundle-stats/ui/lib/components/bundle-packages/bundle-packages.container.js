"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.enhance = void 0;

var _get2 = _interopRequireDefault(require("lodash/get"));

var _react = require("react");

var _recompose = require("recompose");

var _utils = require("@bundle-stats/utils");

var webpack = _interopRequireWildcard(require("@bundle-stats/utils/lib-esm/webpack"));

var _withCustomSort = require("../../hocs/with-custom-sort");

var _withFilteredItems = require("../../hocs/with-filtered-items");

var _withSearch = require("../../hocs/with-search");

var _bundlePackages = require("./bundle-packages.constants");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var getRowFilter = function getRowFilter(filters) {
  return function (item) {
    if (filters[_utils.PACKAGE_FILTERS.CHANGED] && !item.changed) {
      return false;
    }

    if (filters[_utils.PACKAGE_FILTERS.DUPLICATE] && !item.duplicate) {
      return false;
    }

    return true;
  };
};

var getCustomSort = function getCustomSort(sortId) {
  return function (item) {
    if (sortId === _bundlePackages.SORT_BY_NAME) {
      return item.key;
    }

    if (sortId === _bundlePackages.SORT_BY_DELTA) {
      return (0, _get2["default"])(item, 'runs[0].deltaPercentage', 0);
    }

    if (sortId === _bundlePackages.SORT_BY_SIZE) {
      return (0, _get2["default"])(item, 'runs[0].value', 0);
    }

    return [!item.changed, item.key];
  };
};

var addDuplicateTag = function addDuplicateTag(items, duplicatePackages) {
  return items.map(function (item) {
    return _objectSpread(_objectSpread({}, item), {}, {
      duplicate: duplicatePackages.includes(item.key)
    });
  });
};

var enhance = (0, _recompose.compose)((0, _recompose.withProps)(function (_ref) {
  var _defaultFilters, _allEntriesFilters;

  var jobs = _ref.jobs;
  var duplicatePackages = Object.values((0, _get2["default"])(jobs, '0.insights.webpack.duplicatePackages.data', {})).flat();
  var items = (0, _react.useMemo)(function () {
    return addDuplicateTag(webpack.compareBySection.packages(jobs), duplicatePackages);
  }, [jobs, duplicatePackages]);
  var defaultFilters = (_defaultFilters = {}, _defineProperty(_defaultFilters, _utils.PACKAGE_FILTERS.CHANGED, (jobs === null || jobs === void 0 ? void 0 : jobs.length) > 1), _defineProperty(_defaultFilters, _utils.PACKAGE_FILTERS.DUPLICATE, false), _defaultFilters);
  var allEntriesFilters = (_allEntriesFilters = {}, _defineProperty(_allEntriesFilters, _utils.PACKAGE_FILTERS.CHANGED, false), _defineProperty(_allEntriesFilters, _utils.PACKAGE_FILTERS.DUPLICATE, false), _allEntriesFilters);
  return {
    totalRowCount: items.length,
    items: items,
    defaultFilters: defaultFilters,
    allEntriesFilters: allEntriesFilters
  };
}), (0, _withSearch.withSearch)(), (0, _withFilteredItems.withFilteredItems)(getRowFilter), (0, _withCustomSort.withCustomSort)({
  sortItems: _bundlePackages.SORT_BY,
  getCustomSort: getCustomSort,
  sortBy: _bundlePackages.SORT_BY_SIZE,
  direction: _bundlePackages.SORT_BY[_bundlePackages.SORT_BY_SIZE].defaultDirection
}));
exports.enhance = enhance;