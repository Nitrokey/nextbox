"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MetricsTableSearch = void 0;

var _debounce2 = _interopRequireDefault(require("lodash/debounce"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _icon = require("../../ui/icon");

var _metricsTableSearchModule = _interopRequireDefault(require("./metrics-table-search.module.css"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var MetricsTableSearch = function MetricsTableSearch(props) {
  var className = props.className,
      placeholder = props.placeholder,
      search = props.search,
      updateSearch = props.updateSearch;
  var rootClassname = (0, _classnames["default"])(_metricsTableSearchModule["default"].root, className);

  var _useState = (0, _react.useState)(search),
      _useState2 = _slicedToArray(_useState, 2),
      value = _useState2[0],
      setValue = _useState2[1]; // Update local state when initial value has changed


  (0, _react.useEffect)(function () {
    setValue(search);
  }, [search]);
  var debouncedUpdateSearch = (0, _react.useCallback)((0, _debounce2["default"])(updateSearch, 500), []);
  var handleChangeValue = (0, _react.useCallback)(function (event) {
    var newValue = event.target.value;
    setValue(newValue); // Update parent state when the local value has changed

    if (newValue !== search) {
      debouncedUpdateSearch(newValue);
    }
  }, [search]);
  var handleClearValue = (0, _react.useCallback)(function () {
    var newValue = '';
    setValue(newValue);
    updateSearch(newValue);
  }, []);
  return /*#__PURE__*/_react["default"].createElement("div", {
    className: rootClassname
  }, /*#__PURE__*/_react["default"].createElement("input", {
    className: (0, _classnames["default"])('ui-input', 'ui-input--small', _metricsTableSearchModule["default"].input),
    placeholder: placeholder,
    onChange: handleChangeValue,
    value: value
  }), search && /*#__PURE__*/_react["default"].createElement("button", {
    className: _metricsTableSearchModule["default"].cancelButton,
    type: "button",
    onClick: handleClearValue
  }, /*#__PURE__*/_react["default"].createElement(_icon.Icon, {
    className: _metricsTableSearchModule["default"].cancelButtonIcon,
    glyph: "cancel"
  })));
};

exports.MetricsTableSearch = MetricsTableSearch;
MetricsTableSearch.propTypes = {
  className: _propTypes["default"].string,
  placeholder: _propTypes["default"].string,
  search: _propTypes["default"].string.isRequired,
  updateSearch: _propTypes["default"].func.isRequired
};
MetricsTableSearch.defaultProps = {
  className: '',
  placeholder: ''
};