"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MetricsTable = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _table = require("../../ui/table");

var _metric = require("../metric");

var _delta = require("../delta");

var _jobName = require("../job-name");

var _runLabelSum = require("../run-label-sum");

var _metricsTableModule = _interopRequireDefault(require("./metrics-table.module.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var getHeaderCell = function getHeaderCell(items, showHeaderSum) {
  return function (run, index, runs) {
    var className = (0, _classnames["default"])(_metricsTableModule["default"].value, index ? _metricsTableModule["default"].baseline : _metricsTableModule["default"].current);

    if (!run) {
      return {
        children: '-',
        className: className
      };
    }

    var label = run.label,
        internalBuildNumber = run.internalBuildNumber;

    var jobName = /*#__PURE__*/_react["default"].createElement(_jobName.JobName, {
      title: index === 0 ? 'Current' : 'Baseline',
      internalBuildNumber: internalBuildNumber,
      className: _metricsTableModule["default"].jobName
    }, label);

    return {
      children: showHeaderSum ? /*#__PURE__*/_react["default"].createElement("div", {
        className: _metricsTableModule["default"].tableHeaderRun
      }, jobName, /*#__PURE__*/_react["default"].createElement(_runLabelSum.RunLabelSum, {
        className: _metricsTableModule["default"].tableHeaderRunMetric,
        runIndex: index,
        runCount: runs.length,
        rows: items
      })) : jobName,
      className: className
    };
  };
};

var getHeaders = function getHeaders(runs, items, showHeaderSum, title) {
  return [// Metric name column - one empty strying to render the column
  {
    children: title || ' ',
    className: _metricsTableModule["default"].metricName
  }].concat(_toConsumableArray(runs.map(getHeaderCell(items, showHeaderSum))));
};

var generateRowCell = function generateRowCell() {
  return function (item) {
    if (!item || typeof item.value === 'undefined') {
      return '-';
    }

    var displayValue = item.displayValue,
        deltaPercentage = item.deltaPercentage,
        displayDeltaPercentage = item.displayDeltaPercentage,
        deltaType = item.deltaType;
    return /*#__PURE__*/_react["default"].createElement(_metric.Metric, {
      value: displayValue,
      anchored: true
    }, typeof deltaPercentage === 'number' && /*#__PURE__*/_react["default"].createElement(_delta.Delta, {
      displayValue: displayDeltaPercentage,
      deltaType: deltaType
    }));
  };
};

var getRows = function getRows(runs, items, renderRowHeader) {
  return items.map(function (item, index) {
    var changed = item.changed;
    return {
      key: (item === null || item === void 0 ? void 0 : item.key) || index,
      className: changed ? '' : _metricsTableModule["default"].unchanged,
      cells: [// Metric name
      renderRowHeader(item)].concat(_toConsumableArray(item.runs.map(generateRowCell())))
    };
  });
};

var MetricsTable = function MetricsTable(_ref) {
  var className = _ref.className,
      renderRowHeader = _ref.renderRowHeader,
      runs = _ref.runs,
      items = _ref.items,
      emptyMessage = _ref.emptyMessage,
      showHeaderSum = _ref.showHeaderSum,
      headerRows = _ref.headerRows,
      title = _ref.title;
  return /*#__PURE__*/_react["default"].createElement(_table.Table, {
    className: (0, _classnames["default"])(_metricsTableModule["default"].root, className, runs.length > 1 && _metricsTableModule["default"].multipleRuns),
    headers: [].concat(_toConsumableArray(headerRows), [getHeaders(runs, items, showHeaderSum, title)]),
    rows: getRows(runs, items, renderRowHeader),
    emptyMessage: emptyMessage
  });
};

exports.MetricsTable = MetricsTable;
MetricsTable.defaultProps = {
  className: '',
  renderRowHeader: function renderRowHeader(item) {
    return item.label;
  },
  emptyMessage: undefined,
  showHeaderSum: false,
  headerRows: [],
  title: ''
};
MetricsTable.propTypes = {
  className: _propTypes["default"].string,
  renderRowHeader: _propTypes["default"].func,
  runs: _propTypes["default"].arrayOf(_propTypes["default"].shape({
    internalBuildNumber: _propTypes["default"].number
  })).isRequired,
  items: _propTypes["default"].arrayOf(_propTypes["default"].shape({
    key: _propTypes["default"].string,
    label: _propTypes["default"].string,
    runs: _propTypes["default"].arrayOf(_propTypes["default"].shape({
      displayValue: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string]),
      displayDelta: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string])
    }))
  })).isRequired,
  emptyMessage: _propTypes["default"].element,
  showHeaderSum: _propTypes["default"].bool,
  headerRows: _propTypes["default"].arrayOf(_propTypes["default"].arrayOf(_propTypes["default"].oneOfType([_propTypes["default"].element, _propTypes["default"].shape({
    children: _propTypes["default"].node
  })]))),
  title: _propTypes["default"].element
};