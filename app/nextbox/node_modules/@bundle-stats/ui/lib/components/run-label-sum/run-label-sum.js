"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RunLabelSum = void 0;

var _sum2 = _interopRequireDefault(require("lodash/fp/sum"));

var _map2 = _interopRequireDefault(require("lodash/fp/map"));

var _flow2 = _interopRequireDefault(require("lodash/fp/flow"));

var _get2 = _interopRequireDefault(require("lodash/get"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _utils = require("@bundle-stats/utils");

var _delta = require("../delta");

var _metric = require("../metric");

var _runLabelSumModule = _interopRequireDefault(require("./run-label-sum.module.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var METRIC_TYPE_DATA = (0, _utils.getGlobalMetricType)(null, _utils.METRIC_TYPE_FILE_SIZE);

var getRunRowsSum = function getRunRowsSum(rows, runIndex) {
  return (0, _flow2["default"])((0, _map2["default"])(function (row) {
    return (0, _get2["default"])(row, "runs[".concat(runIndex, "].value"), 0);
  }), _sum2["default"])(rows);
};

var Wrapper = function Wrapper(_ref) {
  var className = _ref.className,
      children = _ref.children,
      value = _ref.value;
  return /*#__PURE__*/_react["default"].createElement("div", {
    className: className
  }, /*#__PURE__*/_react["default"].createElement(_metric.Metric, {
    className: _runLabelSumModule["default"].metric,
    formatter: METRIC_TYPE_DATA.formatter,
    value: value
  }), children);
};

Wrapper.propTypes = {
  className: _propTypes["default"].string,
  children: _propTypes["default"].element,
  value: _propTypes["default"].number.isRequired
};
Wrapper.defaultProps = {
  className: '',
  children: null
};

var RunLabelSum = function RunLabelSum(props) {
  var className = props.className,
      runIndex = props.runIndex,
      runCount = props.runCount,
      rows = props.rows;
  var rootClassName = (0, _classnames["default"])(_runLabelSumModule["default"].root, className);
  var currentRunSum = getRunRowsSum(rows, runIndex); // Do not display Delta when last run (baseline)

  if (runIndex === runCount - 1) {
    return /*#__PURE__*/_react["default"].createElement(Wrapper, {
      className: rootClassName,
      value: currentRunSum
    });
  }

  var baselineRunSum = getRunRowsSum(rows, runIndex + 1);
  var info = (0, _utils.getMetricRunInfo)(METRIC_TYPE_DATA, currentRunSum, baselineRunSum);
  return /*#__PURE__*/_react["default"].createElement(Wrapper, {
    className: rootClassName,
    value: currentRunSum
  }, /*#__PURE__*/_react["default"].createElement(_delta.Delta, {
    className: _runLabelSumModule["default"].delta,
    displayValue: info.displayDeltaPercentage,
    deltaType: info.deltaType
  }));
};

exports.RunLabelSum = RunLabelSum;
RunLabelSum.propTypes = {
  /** Adopted child class name */
  className: _propTypes["default"].string,

  /** Run index */
  runIndex: _propTypes["default"].number.isRequired,

  /** Run count */
  runCount: _propTypes["default"].number.isRequired,

  /** Rows data */
  rows: _propTypes["default"].arrayOf(_propTypes["default"].shape({
    key: _propTypes["default"].string,
    runs: _propTypes["default"].arrayOf(_propTypes["default"].shape({
      value: _propTypes["default"].number
    }))
  })).isRequired
};
RunLabelSum.defaultProps = {
  className: ''
};