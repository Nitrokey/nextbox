"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Box = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _constants = require("../../constants");

var _boxModule = _interopRequireDefault(require("./box.module.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var Box = function Box(props) {
  var className = props.className,
      Component = props.as,
      padding = props.padding,
      horizontalPadding = props.horizontalPadding,
      verticalPadding = props.verticalPadding,
      outline = props.outline,
      restProps = _objectWithoutProperties(props, ["className", "as", "padding", "horizontalPadding", "verticalPadding", "outline"]);

  var _ref = Array.isArray(padding) ? [null].concat(_toConsumableArray(padding)) : [padding, verticalPadding, horizontalPadding],
      _ref2 = _slicedToArray(_ref, 3),
      resolvedPadding = _ref2[0],
      resolvedVerticalPadding = _ref2[1],
      resolvedHorizontalPadding = _ref2[2];

  var rootClassName = (0, _classnames["default"])(_boxModule["default"].root, className, resolvedPadding && _boxModule["default"]["padding-".concat(resolvedPadding)], resolvedVerticalPadding && _boxModule["default"]["vertical-padding-".concat(resolvedVerticalPadding)], resolvedHorizontalPadding && _boxModule["default"]["horizontal-padding-".concat(resolvedHorizontalPadding)], outline && _boxModule["default"].outline);
  return /*#__PURE__*/_react["default"].createElement(Component, _extends({
    className: rootClassName
  }, restProps));
};

exports.Box = Box;
Box.defaultProps = {
  className: '',
  as: 'div',
  padding: _constants.NO_SPACE,
  horizontalPadding: '',
  verticalPadding: '',
  outline: false
};
Box.propTypes = {
  /** Adopted child class name */
  className: _propTypes["default"].string,

  /** Rendered component */
  as: _propTypes["default"].elementType,

  /** Padding space size */
  padding: _propTypes["default"].oneOfType([_propTypes["default"].oneOf(_constants.SPACES), _propTypes["default"].arrayOf(_propTypes["default"].oneOf(_constants.SPACES))]),

  /** Horizonatl padding space size */
  horizontalPadding: _propTypes["default"].oneOf(_constants.SPACES),

  /** Vertical padding space size */
  verticalPadding: _propTypes["default"].oneOf(_constants.SPACES),

  /** Outline flag */
  outline: _propTypes["default"].bool
};