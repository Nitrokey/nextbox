"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getGroupFiltersLabelSuffix = exports.LABELS = void 0;

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var FILTER_SUFFIX_MAX_LENGTH = 18;
var ELLIPSES = '...';
var JOIN = ', ';
var LABELS = {
  NONE: 'none',
  ALL: 'all'
};
/**
 * @param {Array<Array>} filters
 * @return {String}
 */

exports.LABELS = LABELS;

var getGroupFiltersLabelSuffix = function getGroupFiltersLabelSuffix(filters) {
  var filterCount = filters.length; // eslint-disable-next-line no-unused-vars

  var checkedFilters = filters.filter(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        _ = _ref2[0],
        defaultValue = _ref2[1].defaultValue;

    return defaultValue;
  });
  var filterCheckedCount = checkedFilters.length;

  if (filterCheckedCount === 0) {
    return LABELS.NONE;
  }

  if (filterCheckedCount === filterCount) {
    return LABELS.ALL;
  } // eslint-disable-next-line no-unused-vars


  var checkedFilterLabels = checkedFilters.map(function (_ref3) {
    var _ref4 = _slicedToArray(_ref3, 2),
        _ = _ref4[0],
        label = _ref4[1].label;

    return label;
  });
  var suffix = '';
  var inlinedLabelCount = 0;
  var done = false;

  for (var i = 0; !done && i < checkedFilterLabels.length && FILTER_SUFFIX_MAX_LENGTH - suffix.length >= 0; i++ // eslint-disable-line no-plusplus
  ) {
    var availableSpace = FILTER_SUFFIX_MAX_LENGTH - suffix.length;
    var label = checkedFilterLabels[i];
    var normalizedLabel = '';

    if (availableSpace - label.length >= 0) {
      // Label is fitting in the available space
      normalizedLabel = label;
    } else if (availableSpace >= 6) {
      // Available space is allowing crop
      normalizedLabel = "".concat(label.substr(0, availableSpace - 3)).concat(ELLIPSES);
    } else {// noop - the label will not fit
    }

    if (normalizedLabel) {
      suffix = "".concat(suffix).concat(suffix ? JOIN : '').concat(normalizedLabel);
      inlinedLabelCount = i + 1;
    } else {
      done = true;
    }
  }

  var skippedLabels = filterCheckedCount - inlinedLabelCount;
  return "".concat(suffix).concat(skippedLabels > 0 ? " +".concat(skippedLabels) : '');
};

exports.getGroupFiltersLabelSuffix = getGroupFiltersLabelSuffix;