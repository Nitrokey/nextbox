"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HorizontalBarChart = void 0;

var _sum2 = _interopRequireDefault(require("lodash/sum"));

var _round2 = _interopRequireDefault(require("lodash/round"));

var _get2 = _interopRequireDefault(require("lodash/get"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _utils = require("../../utils");

var _tooltip = require("../tooltip");

var _horizontalBarChartModule = _interopRequireDefault(require("./horizontal-bar-chart.module.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var HorizontalBarChartItem = /*#__PURE__*/function (_React$Component) {
  _inherits(HorizontalBarChartItem, _React$Component);

  var _super = _createSuper(HorizontalBarChartItem);

  function HorizontalBarChartItem(props) {
    var _this;

    _classCallCheck(this, HorizontalBarChartItem);

    _this = _super.call(this, props);
    _this.textRef = /*#__PURE__*/_react["default"].createRef();
    _this.ref = /*#__PURE__*/_react["default"].createRef();
    _this.state = {
      isTextOverflowing: true
    };
    return _this;
  }

  _createClass(HorizontalBarChartItem, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var wrapperWidth = (0, _get2["default"])(this, 'ref.current.clientWidth', 0);
      var textWidth = (0, _get2["default"])(this, 'textRef.current.scrollWidth', 0);

      if (wrapperWidth >= textWidth + 2 * 4) {
        this.setState({
          isTextOverflowing: false
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          color = _this$props.color,
          label = _this$props.label,
          getItemTooltip = _this$props.getItemTooltip,
          width = _this$props.width;
      var isTextOverflowing = this.state.isTextOverflowing;
      var tooltipContent = getItemTooltip();
      return /*#__PURE__*/_react["default"].createElement("span", {
        className: (0, _classnames["default"])(_horizontalBarChartModule["default"].item, isTextOverflowing && _horizontalBarChartModule["default"].textOverflowed),
        style: {
          width: width,
          background: color
        },
        ref: this.ref
      }, /*#__PURE__*/_react["default"].createElement(_tooltip.Tooltip, {
        className: _horizontalBarChartModule["default"].itemContent,
        title: tooltipContent
      }, /*#__PURE__*/_react["default"].createElement("span", {
        className: _horizontalBarChartModule["default"].itemLabel,
        ref: this.textRef
      }, label)));
    }
  }]);

  return HorizontalBarChartItem;
}(_react["default"].Component);

HorizontalBarChartItem.propTypes = {
  width: _propTypes["default"].string.isRequired,
  color: _propTypes["default"].string.isRequired,
  label: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].element]).isRequired,
  getItemTooltip: _propTypes["default"].func
};
HorizontalBarChartItem.defaultProps = {
  getItemTooltip: function getItemTooltip() {
    return null;
  }
};

var getTotalValues = function getTotalValues(values) {
  return (0, _sum2["default"])(values.map(function (entry) {
    if (_typeof(entry) === 'object') {
      return entry.value;
    }

    return entry;
  }));
};

var HorizontalBarChart = function HorizontalBarChart(props) {
  var className = props.className,
      data = props.data,
      maxValue = props.maxValue;
  var labels = data.labels,
      values = data.values;
  var defaultColors = (0, _utils.getColors)(labels.length);
  var total = maxValue || getTotalValues(values);
  var entries = values.reduce(function (agg, entry, index) {
    var _ref = _typeof(entry) === 'object' ? entry : {
      value: entry
    },
        value = _ref.value,
        _ref$color = _ref.color,
        color = _ref$color === void 0 ? defaultColors[index] : _ref$color,
        _ref$label = _ref.label,
        label = _ref$label === void 0 ? labels[index] : _ref$label,
        getItemTooltip = _ref.getItemTooltip;

    var width = "".concat((0, _round2["default"])(value / total * 100, 2), "%");
    return [].concat(_toConsumableArray(agg), [{
      value: value,
      width: width,
      color: color,
      label: label,
      getItemTooltip: getItemTooltip
    }]);
  }, []);
  return /*#__PURE__*/_react["default"].createElement("div", {
    className: (0, _classnames["default"])(_horizontalBarChartModule["default"].root, className)
  }, entries.map(function (_ref2, index) {
    var color = _ref2.color,
        getItemTooltip = _ref2.getItemTooltip,
        label = _ref2.label,
        width = _ref2.width;
    var key = index;
    return /*#__PURE__*/_react["default"].createElement(HorizontalBarChartItem, {
      key: key,
      width: width,
      color: color,
      label: label,
      getItemTooltip: getItemTooltip,
      className: _horizontalBarChartModule["default"].item
    });
  }));
};

exports.HorizontalBarChart = HorizontalBarChart;
HorizontalBarChart.defaultProps = {
  className: '',
  maxValue: null
};
HorizontalBarChart.propTypes = {
  /** Adopted child class name */
  className: _propTypes["default"].string,

  /** Data */
  data: _propTypes["default"].shape({
    labels: _propTypes["default"].arrayOf(_propTypes["default"].string),
    values: _propTypes["default"].arrayOf(_propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].shape({
      value: _propTypes["default"].number,
      color: _propTypes["default"].string,
      label: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].element])
    })]))
  }).isRequired,

  /** Mac value */
  maxValue: _propTypes["default"].number
};