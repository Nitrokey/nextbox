"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SortDropdown = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _dropdown = require("../dropdown");

var _icon = require("../icon");

var _sortDropdownModule = _interopRequireDefault(require("./sort-dropdown.module.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var SortDropdown = function SortDropdown(props) {
  var className = props.className,
      label = props.label,
      items = props.items,
      sortBy = props.sortBy,
      direction = props.direction,
      onChange = props.onChange;
  var rootClassName = (0, _classnames["default"])(_sortDropdownModule["default"].root, className);
  var customLabel = items[sortBy] ? "Ordered by ".concat(items[sortBy].label) : label;
  return /*#__PURE__*/_react["default"].createElement(_dropdown.Dropdown, {
    className: rootClassName,
    label: customLabel,
    glyph: "sort",
    align: "right"
  }, function (_ref) {
    var MenuItem = _ref.MenuItem,
        menu = _ref.menu,
        menuItemClassName = _ref.menuItemClassName;

    var getButtonOnClick = function getButtonOnClick(newSortBy, newDirection) {
      return function () {
        onChange({
          sortBy: newSortBy,
          direction: newDirection
        });
        menu.toggle();
      };
    };

    return /*#__PURE__*/_react["default"].createElement("div", {
      className: _sortDropdownModule["default"].items
    }, Object.entries(items).map(function (_ref2) {
      var _ref3 = _slicedToArray(_ref2, 2),
          key = _ref3[0],
          item = _ref3[1];

      var buttonProps = direction === 'asc' ? {
        className: (0, _classnames["default"])(_sortDropdownModule["default"].itemButton, _sortDropdownModule["default"].itemAsc),
        onClick: getButtonOnClick(key, 'desc'),
        title: "Order data by ".concat(item.label, " descending")
      } : {
        className: _sortDropdownModule["default"].itemButton,
        onClick: getButtonOnClick(key, 'asc'),
        title: "Order data by ".concat(item.label, " ascending")
      };
      return /*#__PURE__*/_react["default"].createElement(MenuItem, _extends({
        key: key
      }, menu, buttonProps, {
        className: (0, _classnames["default"])(menuItemClassName, _sortDropdownModule["default"].item, sortBy === key && _sortDropdownModule["default"].active)
      }), /*#__PURE__*/_react["default"].createElement("span", {
        className: _sortDropdownModule["default"].itemLabel
      }, item.label), /*#__PURE__*/_react["default"].createElement(_icon.Icon, {
        className: _sortDropdownModule["default"].itemIcon,
        glyph: "arrow"
      }));
    }));
  });
};

exports.SortDropdown = SortDropdown;
SortDropdown.defaultProps = {
  className: '',
  label: 'Order by',
  onChange: function onChange() {},
  sortBy: '',
  direction: 'asc'
};
SortDropdown.propTypes = {
  className: _propTypes["default"].string,
  label: _propTypes["default"].string,
  items: _propTypes["default"].shape(_defineProperty({}, _propTypes["default"].string, _propTypes["default"].string)).isRequired,
  onChange: _propTypes["default"].func,
  sortBy: _propTypes["default"].string,
  direction: _propTypes["default"].string
};