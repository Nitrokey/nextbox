"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getRenderChildWithClassName = exports.getColors = void 0;

var _chunk2 = _interopRequireDefault(require("lodash/chunk"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _chartColors = _interopRequireDefault(require("./chart-colors.json"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var getColors = function getColors() {
  var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;
  var chunks = (0, _chunk2["default"])(_chartColors["default"], Math.round(_chartColors["default"].length / count));
  return chunks.map(function (chunkColors, index) {
    if (index === 0) {
      return chunkColors[0];
    }

    if (index === chunks.length - 1) {
      return chunkColors[chunkColors.length - 1];
    }

    return chunkColors[Math.floor(chunkColors.length / 2)];
  });
};

exports.getColors = getColors;

var getRenderChildWithClassName = function getRenderChildWithClassName(className) {
  return function (child) {
    if (child === null || child === '') {
      return null;
    }

    if (!(child !== null && child !== void 0 && child.props)) {
      return /*#__PURE__*/_react["default"].createElement("div", {
        className: className
      }, child);
    }

    return /*#__PURE__*/_react["default"].cloneElement(child, _objectSpread(_objectSpread({}, child.props), {}, {
      className: (0, _classnames["default"])(className, child.props.className)
    }));
  };
};

exports.getRenderChildWithClassName = getRenderChildWithClassName;