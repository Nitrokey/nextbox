import get from 'lodash/get';
import { METRIC_TYPE_NUMERIC, METRIC_TYPES } from '../config/metrics';
import { formatDelta, getDelta, getDeltaType } from './delta';
import { formatPercentage } from './format';
import { metrics as webpackMetricTypes } from '../webpack/metrics';
import { metrics as lighthouseMetricTypes } from '../lighthouse/metrics';
import { metrics as browsertimeMeticTypes } from '../browsertime/metrics';
export const createGetMetricType = (metrics) => (key, type) => {
    const metric = get(metrics, key);
    if (metric && metric.type) {
        return {
            ...METRIC_TYPES[metric.type],
            ...metric,
        };
    }
    const resolvedType = type || METRIC_TYPE_NUMERIC;
    return {
        ...METRIC_TYPES[resolvedType],
        type: resolvedType,
        label: key,
    };
};
export const getGlobalMetricType = createGetMetricType({
    webpack: webpackMetricTypes,
    lighthouse: lighthouseMetricTypes,
    browsertime: browsertimeMeticTypes,
});
export const getMetricRunInfo = (metric, currentValue, baselineValue) => {
    const { formatter, biggerIsBetter } = metric;
    const runInfo = {
        value: currentValue,
        displayValue: formatter(currentValue),
    };
    if (typeof baselineValue === 'undefined') {
        return runInfo;
    }
    const { delta, deltaPercentage } = getDelta({ value: baselineValue }, { value: currentValue });
    return {
        ...runInfo,
        delta,
        deltaPercentage,
        displayDelta: formatDelta(delta, formatter),
        displayDeltaPercentage: formatDelta(deltaPercentage, formatPercentage),
        deltaType: getDeltaType(deltaPercentage, biggerIsBetter),
    };
};
//# sourceMappingURL=metrics.js.map