import flow from 'lodash/fp/flow';
import fromPairs from 'lodash/fp/fromPairs';
import get from 'lodash/fp/get';
import map from 'lodash/fp/map';
import _filter from 'lodash/fp/filter';
import pick from 'lodash/fp/pick';
import toPairs from 'lodash/fp/toPairs';
const PATH_IGNORE_PATTERN = '.map$';
export const filter = (source, options = {}) => {
    const pathIgnorePattern = new RegExp(options.pathIgnorePattern || PATH_IGNORE_PATTERN);
    const builtAt = get('builtAt')(source);
    const hash = get('hash')(source);
    const assets = flow([
        get('assets'),
        map(pick(['name', 'size'])),
        _filter(({ name }) => name && !pathIgnorePattern.test(name)),
    ])(source);
    const entrypoints = flow([
        get('entrypoints'),
        toPairs,
        map(([key, value]) => [
            key,
            pick('assets')(value),
        ]),
        fromPairs,
    ])(source);
    const chunks = flow([
        get('chunks'),
        map(pick(['id', 'entry', 'initial', 'files', 'names'])),
        _filter(({ id }) => id !== null && typeof id !== 'undefined')
    ])(source);
    const modules = flow([
        get('modules'),
        map(pick(['name', 'size', 'chunks'])),
        map((moduleEntry) => {
            var _a;
            return ({
                ...moduleEntry,
                chunks: (_a = moduleEntry.chunks) === null || _a === void 0 ? void 0 : _a.filter((chunkId) => chunkId !== null && typeof chunkId !== 'undefined'),
            });
        }),
    ])(source);
    return {
        builtAt,
        hash,
        assets,
        entrypoints,
        chunks,
        modules,
    };
};
//# sourceMappingURL=filter.js.map