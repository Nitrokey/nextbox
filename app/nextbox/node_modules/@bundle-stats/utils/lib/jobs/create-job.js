"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createJob = void 0;
const get_1 = __importDefault(require("lodash/get"));
const merge_1 = __importDefault(require("lodash/merge"));
const set_1 = __importDefault(require("lodash/set"));
const config_1 = require("../config");
const create_summary_1 = require("./create-summary");
const webpack = __importStar(require("../webpack"));
const lighthouse = __importStar(require("../lighthouse"));
const browsertime = __importStar(require("../browsertime"));
const SOURCE_FNS = { webpack, lighthouse, browsertime };
const GENERIC_PROPS = ['meta', 'insights', 'metrics'];
const createJob = (source, baseline) => config_1.SOURCE_PATHS.reduce((agg, sourcePath) => {
    const rawData = get_1.default(source, sourcePath);
    if (!rawData) {
        return agg;
    }
    const sourceModule = SOURCE_FNS[sourcePath];
    if (!sourceModule) {
        return agg;
    }
    const extractedData = sourceModule.extract(rawData, baseline);
    const summary = create_summary_1.createSummary(SOURCE_FNS[sourcePath].SUMMARY_METRIC_PATHS, get_1.default(baseline, `metrics.${sourcePath}`, {}), get_1.default(extractedData, 'metrics', {}));
    return merge_1.default({}, agg, { rawData: set_1.default({}, sourcePath, rawData) }, { summary: set_1.default({}, sourcePath, summary) }, ...GENERIC_PROPS.map((genericPropName) => ({
        [genericPropName]: set_1.default({}, sourcePath, extractedData[genericPropName]),
    })));
}, {});
exports.createJob = createJob;
//# sourceMappingURL=create-job.js.map