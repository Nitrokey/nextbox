"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.METRIC_COMPONENT_LINKS = exports.getComponentStateQueryString = exports.getBundlePackagesByNameComponentLink = exports.getBundleAssetsFileTypeComponentLink = exports.BUNDLE_PACKAGES_DUPLICATE = exports.BUNLDE_PACKAGES_COUNT = exports.getBundleModulesByChunk = exports.getBundleModulesBySearch = exports.BUNDLE_MODULES = exports.BUNDLE_ASSETS_CHUNK_COUNT = exports.BUNDLE_ASSETS_COUNT = exports.BUNDLE_ASSETS_CACHE_INVALIDATION = exports.BUNDLE_ASSETS_INITIAL_CSS = exports.BUNDLE_ASSETS_INITIAL_JS = exports.TOTALS = exports.getModuleFileTypeFilters = exports.getModuleChunkFilters = exports.getAssetEntryTypeFilters = exports.getAssetFileTypeFilters = void 0;
const template_1 = __importDefault(require("lodash/template"));
const query_string_1 = require("query-string");
const serialize_query_params_1 = require("serialize-query-params");
const file_types_1 = require("../config/file-types");
const component_links_1 = require("../config/component-links");
const i18n_1 = __importDefault(require("../i18n"));
const getAssetFileTypeFilters = (value = true) => file_types_1.FILE_TYPES.reduce((agg, fileTypeFilter) => ({
    ...agg,
    [`${component_links_1.ASSET_FILE_TYPE}.${fileTypeFilter}`]: value,
}), {});
exports.getAssetFileTypeFilters = getAssetFileTypeFilters;
const getAssetEntryTypeFilters = (value = true) => [component_links_1.ASSET_FILTERS.ENTRY, component_links_1.ASSET_FILTERS.INITIAL, component_links_1.ASSET_FILTERS.CHUNK, component_links_1.ASSET_FILTERS.ASSET].reduce((agg, entryTypeFilter) => ({
    ...agg,
    [`${component_links_1.ASSET_ENTRY_TYPE}.${entryTypeFilter}`]: value,
}), {});
exports.getAssetEntryTypeFilters = getAssetEntryTypeFilters;
const getModuleChunkFilters = (chunkIds, value) => chunkIds.reduce((agg, chunkId) => ({
    ...agg,
    [`${component_links_1.MODULE_CHUNK}.${chunkId}`]: value,
}), {});
exports.getModuleChunkFilters = getModuleChunkFilters;
const getModuleFileTypeFilters = (value = true) => file_types_1.MODULE_SOURCE_FILE_TYPES.reduce((agg, fileType) => ({
    ...agg,
    [`${component_links_1.MODULE_FILE_TYPE}.${fileType}`]: value,
}), {});
exports.getModuleFileTypeFilters = getModuleFileTypeFilters;
exports.TOTALS = {
    section: component_links_1.SECTIONS.TOTALS,
    title: i18n_1.default.COMPONENT_LINK_TOTALS,
};
exports.BUNDLE_ASSETS_INITIAL_JS = {
    section: component_links_1.SECTIONS.ASSETS,
    title: i18n_1.default.COMPONENT_LINK_BUNDLE_ASSETS_INITIAL_JS,
    params: {
        [component_links_1.COMPONENT.BUNDLE_ASSETS]: {
            filters: {
                ...exports.getAssetEntryTypeFilters(false),
                [`${component_links_1.ASSET_ENTRY_TYPE}.${component_links_1.ASSET_FILTERS.INITIAL}`]: true,
                ...exports.getAssetFileTypeFilters(false),
                [`${component_links_1.ASSET_FILE_TYPE}.${file_types_1.FILE_TYPE_JS}`]: true,
            },
        },
    },
};
exports.BUNDLE_ASSETS_INITIAL_CSS = {
    section: component_links_1.SECTIONS.ASSETS,
    title: i18n_1.default.COMPONENT_LINK_BUNDLE_ASSETS_INITIAL_CSS,
    params: {
        [component_links_1.COMPONENT.BUNDLE_ASSETS]: {
            filters: {
                ...exports.getAssetEntryTypeFilters(false),
                [`${component_links_1.ASSET_ENTRY_TYPE}.${component_links_1.ASSET_FILTERS.INITIAL}`]: true,
                ...exports.getAssetFileTypeFilters(false),
                [`${component_links_1.ASSET_FILE_TYPE}.${file_types_1.FILE_TYPE_CSS}`]: true,
            },
        },
    },
};
exports.BUNDLE_ASSETS_CACHE_INVALIDATION = {
    section: component_links_1.SECTIONS.ASSETS,
    title: i18n_1.default.COMPONENT_LINK_BUNDLE_ASSETS_CACHE_INVALIDATION,
    params: {
        [component_links_1.COMPONENT.BUNDLE_ASSETS]: {
            filters: {
                [component_links_1.ASSET_FILTERS.CHANGED]: true,
            },
        },
    },
};
exports.BUNDLE_ASSETS_COUNT = {
    section: component_links_1.SECTIONS.ASSETS,
    title: i18n_1.default.COMPONENT_LINK_BUNDLE_ASSETS_COUNT,
    params: {
        [component_links_1.COMPONENT.BUNDLE_ASSETS]: {
            filters: {
                [component_links_1.ASSET_FILTERS.CHANGED]: false,
            },
        },
    },
};
exports.BUNDLE_ASSETS_CHUNK_COUNT = {
    section: component_links_1.SECTIONS.ASSETS,
    title: i18n_1.default.COMPONENT_LINK_BUNDLE_ASSETS_CHUNK_COUNT,
    params: {
        [component_links_1.COMPONENT.BUNDLE_ASSETS]: {
            filters: {
                ...exports.getAssetEntryTypeFilters(false),
                [`${component_links_1.ASSET_ENTRY_TYPE}.${component_links_1.ASSET_FILTERS.CHUNK}`]: true,
            },
        },
    },
};
exports.BUNDLE_MODULES = {
    section: component_links_1.SECTIONS.MODULES,
    title: i18n_1.default.COMPONENT_LINK_MODULES,
    params: {
        [component_links_1.COMPONENT.BUNDLE_MODULES]: {
            filters: {
                [component_links_1.MODULE_FILTERS.CHANGED]: false,
            },
        },
    },
};
const getBundleModulesBySearch = (search) => ({
    section: component_links_1.SECTIONS.MODULES,
    title: i18n_1.default.COMPONENT_LINK_MODULES,
    params: {
        [component_links_1.COMPONENT.BUNDLE_MODULES]: {
            search,
            filters: {
                [component_links_1.MODULE_FILTERS.CHANGED]: false,
            },
        },
    },
});
exports.getBundleModulesBySearch = getBundleModulesBySearch;
const getBundleModulesByChunk = (chunkIds, chunkId, fileType = '') => ({
    section: component_links_1.SECTIONS.MODULES,
    title: i18n_1.default.COMPONENT_LINK_CHUNK_MODULES,
    params: {
        [component_links_1.COMPONENT.BUNDLE_MODULES]: {
            filters: {
                ...exports.getModuleChunkFilters(chunkIds, false),
                [`${component_links_1.MODULE_CHUNK}.${chunkId}`]: true,
                ...(fileType && {
                    ...exports.getModuleFileTypeFilters(false),
                    [`${component_links_1.MODULE_FILE_TYPE}.${fileType}`]: true,
                }),
            },
        },
    },
});
exports.getBundleModulesByChunk = getBundleModulesByChunk;
exports.BUNLDE_PACKAGES_COUNT = {
    section: component_links_1.SECTIONS.PACKAGES,
    title: i18n_1.default.COMPONENT_LINK_PACKAGES_COUNT,
    params: {
        [component_links_1.COMPONENT.BUNDLE_PACKAGES]: {
            filters: {
                [component_links_1.PACKAGE_FILTERS.CHANGED]: false,
            },
        },
    },
};
exports.BUNDLE_PACKAGES_DUPLICATE = {
    section: component_links_1.SECTIONS.PACKAGES,
    title: i18n_1.default.COMPONENT_LINK_PACKAGES_DUPLICATE,
    params: {
        [component_links_1.COMPONENT.BUNDLE_PACKAGES]: {
            filters: {
                [component_links_1.PACKAGE_FILTERS.DUPLICATE]: true,
            },
        },
    },
};
const getBundleAssetsFileTypeComponentLink = (fileType, label) => ({
    section: component_links_1.SECTIONS.ASSETS,
    title: template_1.default(i18n_1.default.COMPONENT_LINK_BUNDLE_ASSETS_BY_FILE_TYPE)({ label }),
    params: {
        [component_links_1.COMPONENT.BUNDLE_ASSETS]: {
            filters: {
                ...exports.getAssetFileTypeFilters(false),
                [`${component_links_1.ASSET_FILE_TYPE}.${fileType}`]: true,
            },
        },
    },
});
exports.getBundleAssetsFileTypeComponentLink = getBundleAssetsFileTypeComponentLink;
const getBundlePackagesByNameComponentLink = (search) => ({
    section: component_links_1.SECTIONS.PACKAGES,
    title: i18n_1.default.COMPONENT_LINK_VIEW_PACKAGE,
    params: {
        [component_links_1.COMPONENT.BUNDLE_PACKAGES]: {
            search,
            filters: {
                [component_links_1.PACKAGE_FILTERS.DUPLICATE]: true,
            },
        },
    },
});
exports.getBundlePackagesByNameComponentLink = getBundlePackagesByNameComponentLink;
const getComponentStateQueryString = (params = {}) => {
    const meta = Object.keys(params).reduce((agg, componentName) => ({
        ...agg,
        [componentName]: serialize_query_params_1.JsonParam,
    }), {});
    return query_string_1.stringify(serialize_query_params_1.encodeQueryParams(meta, params));
};
exports.getComponentStateQueryString = getComponentStateQueryString;
exports.METRIC_COMPONENT_LINKS = new Map([
    ['webpack.totalSizeByTypeALL', { link: exports.TOTALS }],
    ['webpack.totalInitialSizeJS', { link: exports.BUNDLE_ASSETS_INITIAL_JS }],
    ['webpack.totalInitialSizeCSS', { link: exports.BUNDLE_ASSETS_INITIAL_CSS }],
    [
        'webpack.cacheInvalidation',
        {
            link: exports.BUNDLE_ASSETS_CACHE_INVALIDATION,
            showDelta: false,
        },
    ],
    ['webpack.assetCount', { link: exports.BUNDLE_ASSETS_COUNT }],
    ['webpack.chunkCount', { link: exports.BUNDLE_ASSETS_CHUNK_COUNT }],
    ['webpack.moduleCount', { link: exports.BUNDLE_MODULES }],
    ['webpack.packageCount', { link: exports.BUNLDE_PACKAGES_COUNT }],
    ['webpack.duplicatePackagesCount', { link: exports.BUNDLE_PACKAGES_DUPLICATE }],
]);
//# sourceMappingURL=component-links.js.map