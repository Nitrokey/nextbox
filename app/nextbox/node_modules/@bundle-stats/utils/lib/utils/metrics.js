"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMetricRunInfo = exports.getGlobalMetricType = exports.createGetMetricType = void 0;
const get_1 = __importDefault(require("lodash/get"));
const metrics_1 = require("../config/metrics");
const delta_1 = require("./delta");
const format_1 = require("./format");
const metrics_2 = require("../webpack/metrics");
const metrics_3 = require("../lighthouse/metrics");
const metrics_4 = require("../browsertime/metrics");
const createGetMetricType = (metrics) => (key, type) => {
    const metric = get_1.default(metrics, key);
    if (metric && metric.type) {
        return {
            ...metrics_1.METRIC_TYPES[metric.type],
            ...metric,
        };
    }
    const resolvedType = type || metrics_1.METRIC_TYPE_NUMERIC;
    return {
        ...metrics_1.METRIC_TYPES[resolvedType],
        type: resolvedType,
        label: key,
    };
};
exports.createGetMetricType = createGetMetricType;
exports.getGlobalMetricType = exports.createGetMetricType({
    webpack: metrics_2.metrics,
    lighthouse: metrics_3.metrics,
    browsertime: metrics_4.metrics,
});
const getMetricRunInfo = (metric, currentValue, baselineValue) => {
    const { formatter, biggerIsBetter } = metric;
    const runInfo = {
        value: currentValue,
        displayValue: formatter(currentValue),
    };
    if (typeof baselineValue === 'undefined') {
        return runInfo;
    }
    const { delta, deltaPercentage } = delta_1.getDelta({ value: baselineValue }, { value: currentValue });
    return {
        ...runInfo,
        delta,
        deltaPercentage,
        displayDelta: delta_1.formatDelta(delta, formatter),
        displayDeltaPercentage: delta_1.formatDelta(deltaPercentage, format_1.formatPercentage),
        deltaType: delta_1.getDeltaType(deltaPercentage, biggerIsBetter),
    };
};
exports.getMetricRunInfo = getMetricRunInfo;
//# sourceMappingURL=metrics.js.map