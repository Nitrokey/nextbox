"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.compare = exports.compareBySection = void 0;
const flatMap_1 = __importDefault(require("lodash/flatMap"));
const map_1 = __importDefault(require("lodash/map"));
const merge_1 = __importDefault(require("lodash/merge"));
const uniq_1 = __importDefault(require("lodash/uniq"));
const metrics_1 = require("../config/metrics");
const add_row_data_1 = require("../report/add-row-data");
const merge_metrics_by_key_1 = require("../report/merge-metrics-by-key");
const compare_metrics_1 = require("../report/compare-metrics");
const constants_1 = require("./constants");
const selectors_1 = require("./selectors");
const compareStats = (jobs) => compare_metrics_1.compareMetrics(jobs, selectors_1.selectors.stats);
const compareSizes = (jobs) => compare_metrics_1.compareMetrics(jobs, selectors_1.selectors.sizes);
const compareAssets = (jobs) => compare_metrics_1.compareMetrics(jobs, selectors_1.selectors.assets, metrics_1.METRIC_TYPE_FILE_SIZE);
const compareModules = (jobs) => {
    const jobsModuleMetrics = jobs.map(selectors_1.selectors.modules);
    const allChunkIds = uniq_1.default(flatMap_1.default(jobsModuleMetrics, (jobModuleMetrics) => Object.keys(jobModuleMetrics)));
    return allChunkIds.map((chunkId) => {
        const jobsChunk = map_1.default(jobsModuleMetrics, chunkId);
        const chunkNames = uniq_1.default(flatMap_1.default(jobsChunk, 'chunkNames'));
        const modules = merge_metrics_by_key_1.mergeMetricsByKey(map_1.default(jobsChunk, 'modules')).map((row) => add_row_data_1.addRowData(row, metrics_1.METRIC_TYPE_FILE_SIZE));
        return { chunkId, chunkNames, modules };
    });
};
const compareAllModules = (jobs) => {
    const jobsWithAllModules = jobs.map((job) => {
        const modulesByChunkId = selectors_1.selectors.modules(job);
        const allModules = Object.entries(modulesByChunkId).reduce((agg, [chunkId, { modules }]) => {
            const processedModules = Object.entries(modules).reduce((chunkAgg, [moduleName, moduleData]) => {
                const existingModule = chunkAgg[moduleName];
                chunkAgg[moduleName] = {
                    ...existingModule,
                    ...moduleData,
                    chunkIds: [...((existingModule === null || existingModule === void 0 ? void 0 : existingModule.chunkIds) || []), chunkId],
                };
                return chunkAgg;
            }, agg);
            return processedModules;
        }, {});
        return merge_1.default({}, job, {
            metrics: {
                webpack: {
                    allModules,
                },
            },
        });
    });
    return compare_metrics_1.compareMetrics(jobsWithAllModules, selectors_1.selectors.allModules, metrics_1.METRIC_TYPE_FILE_SIZE);
};
const comparePackages = (jobs) => compare_metrics_1.compareMetrics(jobs, selectors_1.selectors.packages, metrics_1.METRIC_TYPE_FILE_SIZE);
exports.compareBySection = {
    [constants_1.SECTION_WEBPACK_STATS]: compareStats,
    [constants_1.SECTION_WEBPACK_SIZES]: compareSizes,
    [constants_1.SECTION_WEBPACK_ASSETS]: compareAssets,
    [constants_1.SECTION_WEBPACK_MODULES]: compareModules,
    [constants_1.SECTION_WEBPACK_ALL_MODULES]: compareAllModules,
    [constants_1.SECTION_WEBPACK_PACKAGES]: comparePackages,
};
const compare = (jobs) => constants_1.SECTIONS.reduce((agg, sectionId) => ({
    ...agg,
    [sectionId]: exports.compareBySection[sectionId](jobs),
}), {});
exports.compare = compare;
//# sourceMappingURL=compare.js.map