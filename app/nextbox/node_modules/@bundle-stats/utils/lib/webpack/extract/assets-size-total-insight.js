"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractAssetsSizeTotalInsight = void 0;
const get_1 = __importDefault(require("lodash/get"));
const template_1 = __importDefault(require("lodash/template"));
const insights_1 = require("../../config/insights");
const metrics_1 = require("../../utils/metrics");
const utils_1 = require("../utils");
const INFO_TEMPLATE = template_1.default('<%= metric %> â€” <%= displayValue %> (<%= displayDeltaPercentage %>).');
const METRIC_NAME = 'totalSizeByTypeALL';
const extractAssetsSizeTotalInsight = (webpackStats, currentExtractedData, baselineBundleStats) => {
    const currentValue = get_1.default(currentExtractedData, ['metrics', METRIC_NAME, 'value'], 0);
    const baselineValue = get_1.default(baselineBundleStats, ['metrics', 'webpack', METRIC_NAME, 'value'], 0);
    const metric = utils_1.getMetricType(METRIC_NAME);
    const info = metrics_1.getMetricRunInfo(metric, currentValue, baselineValue);
    const { displayDeltaPercentage, displayValue } = info;
    return {
        insights: {
            assetsSizeTotal: {
                type: insights_1.INSIGHT_INFO,
                data: {
                    text: INFO_TEMPLATE({ metric: metric.label, displayValue, displayDeltaPercentage }),
                    md: INFO_TEMPLATE({
                        metric: `*${metric.label}*`,
                        displayValue: `*${displayValue}*`,
                        displayDeltaPercentage: `*${displayDeltaPercentage}*`,
                    }),
                    info,
                },
            },
        },
    };
};
exports.extractAssetsSizeTotalInsight = extractAssetsSizeTotalInsight;
//# sourceMappingURL=assets-size-total-insight.js.map