"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractAssetsSize = void 0;
const get_1 = __importDefault(require("lodash/get"));
const map_1 = __importDefault(require("lodash/map"));
const sum_1 = __importDefault(require("lodash/sum"));
const file_types_1 = require("../../config/file-types");
const file_types_2 = require("../../utils/file-types");
const METRIC_NAME_ALL = 'ALL';
const METRIC_NAME_PREFIX = 'totalSizeByType';
const getMetricName = (fileType) => `${METRIC_NAME_PREFIX}${fileType}`;
const generateInitialSizeByType = () => file_types_1.FILE_TYPES.reduce((accumulator, fileType) => ({
    ...accumulator,
    [getMetricName(fileType)]: {
        value: 0,
    },
}), {});
const calculateTotalByType = (assets) => assets.reduce((accumulator, current) => {
    const fileType = file_types_2.getFileType(current.name);
    const statName = getMetricName(fileType);
    const value = accumulator[statName].value + current.value;
    return {
        ...accumulator,
        [statName]: {
            value,
        },
    };
}, generateInitialSizeByType());
const getFilterInitialAssetsByType = (fileType) => ({ name, isInitial }) => file_types_2.getFileType(name) === fileType && isInitial;
const calculateInitialTotals = (assets) => {
    const cssAssets = assets.filter(getFilterInitialAssetsByType(file_types_1.FILE_TYPE_CSS));
    const jsAssets = assets.filter(getFilterInitialAssetsByType(file_types_1.FILE_TYPE_JS));
    return {
        totalInitialSizeCSS: {
            value: sum_1.default(map_1.default(cssAssets, 'value')),
        },
        totalInitialSizeJS: {
            value: sum_1.default(map_1.default(jsAssets, 'value')),
        },
    };
};
const extractAssetsSize = (webpackStats, currentExtractedData) => {
    const bundleAssets = Object.values(get_1.default(currentExtractedData, 'metrics.assets', {}));
    const sizes = calculateTotalByType(bundleAssets);
    const generic = {
        [getMetricName(METRIC_NAME_ALL)]: {
            value: sum_1.default(map_1.default(bundleAssets, 'value')),
        },
        ...calculateInitialTotals(bundleAssets),
    };
    return {
        metrics: {
            ...generic,
            sizes,
        },
    };
};
exports.extractAssetsSize = extractAssetsSize;
//# sourceMappingURL=assets-size.js.map