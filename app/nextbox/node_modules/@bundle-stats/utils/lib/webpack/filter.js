"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.filter = void 0;
const flow_1 = __importDefault(require("lodash/fp/flow"));
const fromPairs_1 = __importDefault(require("lodash/fp/fromPairs"));
const get_1 = __importDefault(require("lodash/fp/get"));
const map_1 = __importDefault(require("lodash/fp/map"));
const filter_1 = __importDefault(require("lodash/fp/filter"));
const pick_1 = __importDefault(require("lodash/fp/pick"));
const toPairs_1 = __importDefault(require("lodash/fp/toPairs"));
const PATH_IGNORE_PATTERN = '.map$';
const filter = (source, options = {}) => {
    const pathIgnorePattern = new RegExp(options.pathIgnorePattern || PATH_IGNORE_PATTERN);
    const builtAt = get_1.default('builtAt')(source);
    const hash = get_1.default('hash')(source);
    const assets = flow_1.default([
        get_1.default('assets'),
        map_1.default(pick_1.default(['name', 'size'])),
        filter_1.default(({ name }) => name && !pathIgnorePattern.test(name)),
    ])(source);
    const entrypoints = flow_1.default([
        get_1.default('entrypoints'),
        toPairs_1.default,
        map_1.default(([key, value]) => [
            key,
            pick_1.default('assets')(value),
        ]),
        fromPairs_1.default,
    ])(source);
    const chunks = flow_1.default([
        get_1.default('chunks'),
        map_1.default(pick_1.default(['id', 'entry', 'initial', 'files', 'names'])),
        filter_1.default(({ id }) => id !== null && typeof id !== 'undefined')
    ])(source);
    const modules = flow_1.default([
        get_1.default('modules'),
        map_1.default(pick_1.default(['name', 'size', 'chunks'])),
        map_1.default((moduleEntry) => {
            var _a;
            return ({
                ...moduleEntry,
                chunks: (_a = moduleEntry.chunks) === null || _a === void 0 ? void 0 : _a.filter((chunkId) => chunkId !== null && typeof chunkId !== 'undefined'),
            });
        }),
    ])(source);
    return {
        builtAt,
        hash,
        assets,
        entrypoints,
        chunks,
        modules,
    };
};
exports.filter = filter;
//# sourceMappingURL=filter.js.map