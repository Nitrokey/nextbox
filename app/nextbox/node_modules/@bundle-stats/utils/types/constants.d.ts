export declare enum MetricTypeType {
    'METRIC_TYPE_NUMERIC' = 0,
    'METRIC_TYPE_SCORE' = 1,
    'METRIC_TYPE_FILE_SIZE' = 2,
    'METRIC_TYPE_DURATION' = 3,
    'METRIC_TYPE_PERCENTAGE' = 4
}
export interface MetricTypeConfig {
    label: string;
    description: string;
    type: MetricTypeType;
}
export interface MetricType extends MetricTypeConfig {
    formatter: Function;
    biggerIsBetter: boolean;
}
export declare enum MetricRunInfoDeltaType {
    'HIGH_NEGATIVE' = 0,
    'NEGATIVE' = 1,
    'LOW_NEGATIVE' = 2,
    'NO_CHANGE' = 3,
    'LOW_POSITIVE' = 4,
    'POSITIVE' = 5,
    'HIGH_POSITIVE' = 6
}
export interface MetricRun {
    value: number;
}
export interface MetricRunInfo {
    value: number;
    displayValue: string;
    delta?: number;
    displayDelta?: string;
    displayDeltaPercentage?: string;
    deltaType?: MetricRunInfoDeltaType;
}
export interface Metric {
    value: number;
}
export interface ModuleMetric extends Metric {
    name: string;
}
export interface PackageMetric extends Metric {
    path: string;
}
export interface WebpackMetricsModulesChunk {
    modules: Record<string, ModuleMetric>;
}
export interface WebpackMetricsModules {
    metrics: {
        modules: Record<string, WebpackMetricsModulesChunk>;
    };
}
export interface WebpackMetricsPackages {
    metrics: {
        packages: Record<string, PackageMetric>;
    };
}
export interface LighthouseSource {
    lighthouseVersion: string;
    fetchTime: string;
    requestedUrl: string;
    categories: {
        [key: string]: {
            score: number;
        };
    };
    audits: {
        [key: string]: {
            score: number;
            numericValue: number;
        };
    };
}
export interface LighthouseMetricsCategoryScores {
    performanceScore: MetricRun;
    accessibilityScore: MetricRun;
    bestPracticesScore: MetricRun;
    seoScore: MetricRun;
    pwaScore: MetricRun;
}
export interface LighthouseMetricsScore {
    score: MetricRun;
}
export interface LighthouseMetricsAudits {
    speedIndex: MetricRun;
    firstMeaningfulPaint: MetricRun;
    timeToFirstByte: MetricRun;
    firstInteractive: MetricRun;
    totalByteWeight: MetricRun;
    domSize: MetricRun;
}
export interface BrowsertimeSourceMetric {
    median: number;
}
export interface BrowsertimeSource {
    info?: {
        browsertime: {
            version: string;
        };
        timestamp: string;
        url: string;
    };
    statistics?: {
        timings: {
            firstPaint: BrowsertimeSourceMetric;
            fullyLoaded: BrowsertimeSourceMetric;
            pageTimings: {
                backEndTime: BrowsertimeSourceMetric;
                domContentLoadedTime: BrowsertimeSourceMetric;
                domInteractiveTime: BrowsertimeSourceMetric;
                domainLookupTime: BrowsertimeSourceMetric;
                frontEndTime: BrowsertimeSourceMetric;
                pageDownloadTime: BrowsertimeSourceMetric;
                pageLoadTime: BrowsertimeSourceMetric;
                redirectionTime: BrowsertimeSourceMetric;
                serverConnectionTime: BrowsertimeSourceMetric;
                serverResponseTime: BrowsertimeSourceMetric;
            };
            paintTiming: {
                'first-contentful-paint': BrowsertimeSourceMetric;
            };
            rumSpeedIndex: BrowsertimeSourceMetric;
        };
        visualmetrics: {
            FirstVisualChange: BrowsertimeSourceMetric;
            LastVisualChange: BrowsertimeSourceMetric;
            PerceptualSpeedIndex: BrowsertimeSourceMetric;
            SpeedIndex: BrowsertimeSourceMetric;
            VisualComplete85: BrowsertimeSourceMetric;
            VisualComplete95: BrowsertimeSourceMetric;
            VisualComplete99: BrowsertimeSourceMetric;
        };
    };
}
export interface BrowsertimeMetrics {
    firstPaint: MetricRun;
    fullyLoaded: MetricRun;
    backEndTime: MetricRun;
    domContentLoadedTime: MetricRun;
    domInteractiveTime: MetricRun;
    domainLookupTime: MetricRun;
    frontEndTime: MetricRun;
    pageDownloadTime: MetricRun;
    pageLoadTime: MetricRun;
    redirectionTime: MetricRun;
    serverConnectionTime: MetricRun;
    serverResponseTime: MetricRun;
    firstContentfulPaint: MetricRun;
    rumSpeedIndex: MetricRun;
    firstVisualChange: MetricRun;
    lastVisualChange: MetricRun;
    perceptualSpeedIndex: MetricRun;
    speedIndex: MetricRun;
    visualComplete85: MetricRun;
    visualComplete95: MetricRun;
    visualComplete99: MetricRun;
}
