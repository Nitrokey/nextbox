{"version":3,"sources":["../lib/scopedstorage.ts"],"names":["ScopedStorage","scope","wrapped","persistent","GLOBAL_SCOPE_PERSISTENT","GLOBAL_SCOPE_VOLATILE","btoa","key","value","setItem","scopeKey","getItem","removeItem","Object","keys","filter","startsWith","map","bind"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;IAEqBA,a;;;AAOjB,yBAAYC,KAAZ,EAA2BC,OAA3B,EAA6CC,UAA7C,EAAkE;AAAA;;AAAA;;AAAA;;AAC9D,SAAKF,KAAL,aAAgBE,UAAU,GAAGH,aAAa,CAACI,uBAAjB,GAA2CJ,aAAa,CAACK,qBAAnF,cAA4GC,IAAI,CAACL,KAAD,CAAhH;AACA,SAAKC,OAAL,GAAeA,OAAf;AACH;;;;6BAEgBK,G,EAAa;AAC1B,uBAAU,KAAKN,KAAf,SAAuBM,GAAvB;AACH;;;4BAEOA,G,EAAaC,K,EAAqB;AACtC,WAAKN,OAAL,CAAaO,OAAb,CAAqB,KAAKC,QAAL,CAAcH,GAAd,CAArB,EAAyCC,KAAzC;AACH;;;4BAEOD,G,EAA4B;AAChC,aAAO,KAAKL,OAAL,CAAaS,OAAb,CAAqB,KAAKD,QAAL,CAAcH,GAAd,CAArB,CAAP;AACH;;;+BAEUA,G,EAAmB;AAC1B,WAAKL,OAAL,CAAaU,UAAb,CAAwB,KAAKF,QAAL,CAAcH,GAAd,CAAxB;AACH;;;4BAEa;AAAA;;AACVM,MAAAA,MAAM,CAACC,IAAP,CAAY,KAAKZ,OAAjB,EACKa,MADL,CACY,UAAAR,GAAG;AAAA,eAAIA,GAAG,CAACS,UAAJ,CAAe,KAAI,CAACf,KAApB,CAAJ;AAAA,OADf,EAEKgB,GAFL,CAES,KAAKf,OAAL,CAAaU,UAAb,CAAwBM,IAAxB,CAA6B,KAAKhB,OAAlC,CAFT;AAGH;;;;;;;;gBAhCgBF,a,2BAEqB,e;;gBAFrBA,a,6BAGuB,e","sourcesContent":["import NextcloudStorage from './storage'\n\nexport default class ScopedStorage implements NextcloudStorage {\n\n    public static GLOBAL_SCOPE_VOLATILE = 'nextcloud_vol'\n    public static GLOBAL_SCOPE_PERSISTENT = 'nextcloud_per'\n    private scope: string\n    private wrapped: Storage\n\n    constructor(scope: string, wrapped: Storage, persistent: boolean) {\n        this.scope = `${persistent ? ScopedStorage.GLOBAL_SCOPE_PERSISTENT : ScopedStorage.GLOBAL_SCOPE_VOLATILE}_${btoa(scope)}_`\n        this.wrapped = wrapped\n    }\n\n    private scopeKey(key: string) {\n        return `${this.scope}${key}`\n    }\n\n    setItem(key: string, value: string): void {\n        this.wrapped.setItem(this.scopeKey(key), value)\n    }\n\n    getItem(key: string): string | null {\n        return this.wrapped.getItem(this.scopeKey(key))\n    }\n\n    removeItem(key: string): void {\n        this.wrapped.removeItem(this.scopeKey(key))\n    }\n\n    clear(): void {\n        Object.keys(this.wrapped)\n            .filter(key => key.startsWith(this.scope))\n            .map(this.wrapped.removeItem.bind(this.wrapped))\n    }\n\n}\n"],"file":"scopedstorage.js"}