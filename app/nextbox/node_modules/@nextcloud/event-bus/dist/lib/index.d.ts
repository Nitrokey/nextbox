declare global {
    interface Window {
        OC: any;
        _nc_event_bus: any;
    }
}
/**
 * Register an event listener
 *
 * @param name name of the event
 * @param handler callback invoked for every matching event emitted on the bus
 */
export declare function subscribe(name: string, handler: (string: any) => void): void;
/**
 * Unregister a previously registered event listener
 *
 * Note: doesn't work with anonymous functions (closures). Use method of an object or store listener function in variable.
 *
 * @param name name of the event
 * @param handler callback passed to `subscribed`
 */
export declare function unsubscribe(name: string, handler: (string: any) => void): void;
/**
 * Emit an event
 *
 * @param name name of the event
 * @param event event payload
 */
export declare function emit(name: string, event: object): void;
