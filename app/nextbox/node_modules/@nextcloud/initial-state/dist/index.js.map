{"version":3,"sources":["../lib/index.ts"],"names":["loadState","app","key","fallback","elem","document","querySelector","undefined","Error","JSON","parse","atob","value","e"],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,SAAT,CAAsBC,GAAtB,EAAmCC,GAAnC,EAAgDC,QAAhD,EAAiE;AACpE,MAAMC,IAAI,GAAqBC,QAAQ,CAACC,aAAT,0BAAyCL,GAAzC,cAAgDC,GAAhD,EAA/B;;AACA,MAAIE,IAAI,KAAK,IAAb,EAAmB;AACf,QAAID,QAAQ,KAAKI,SAAjB,EAA4B;AACxB,aAAOJ,QAAP;AACH;;AACD,UAAM,IAAIK,KAAJ,wCAA0CN,GAA1C,iBAAoDD,GAApD,EAAN;AACH;;AAED,MAAI;AACA,WAAOQ,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACP,IAAI,CAACQ,KAAN,CAAf,CAAP;AACH,GAFD,CAEE,OAAOC,CAAP,EAAU;AACT,UAAM,IAAIL,KAAJ,yCAA2CN,GAA3C,iBAAqDD,GAArD,EAAN;AACF;AACJ","sourcesContent":["/**\n * @param app app ID, e.g. \"mail\"\n * @param key name of the property\n * @param fallback optional parameter to use as default value\n * @throws if the key can't be found\n */\nexport function loadState<T>(app: string, key: string, fallback?: T): T {\n    const elem = <HTMLInputElement>document.querySelector(`#initial-state-${app}-${key}`)\n    if (elem === null) {\n        if (fallback !== undefined) {\n            return fallback\n        }\n        throw new Error(`Could not find initial state ${key} of ${app}`)\n    }\n\n    try {\n        return JSON.parse(atob(elem.value))\n    } catch (e) {\n       throw new Error(`Could not parse initial state ${key} of ${app}`)\n    }\n}\n"],"file":"index.js"}