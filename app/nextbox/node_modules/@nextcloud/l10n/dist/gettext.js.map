{"version":3,"sources":["../lib/gettext.ts"],"names":["GettextBuilder","translations","debug","language","locale","setLanguage","replace","data","GettextWrapper","gt","GetText","sourceLocale","key","addTranslations","setLocale","translated","vars","a","b","r","toString","original","placeholders","subtitudePlaceholders","gettext","singular","plural","count","ngettext","getGettextBuilder"],"mappings":";;;;;;;;;;;;;;;AAAA;;AAEA;;;;;;;;;;IAEMA,c;;;;SAGMC,Y,GAAe,E;SACfC,K,GAAQ,K;;;;;gCAEJC,Q,EAAkC;AAC1C,WAAKC,MAAL,GAAcD,QAAd;AACA,aAAO,IAAP;AACH;;;mCAE8B;AAC3B,aAAO,KAAKE,WAAL,CAAiB,qBAAcC,OAAd,CAAsB,GAAtB,EAA2B,GAA3B,CAAjB,CAAP;AACH;;;mCAEcH,Q,EAAkBI,I,EAA2B;AACxD,WAAKN,YAAL,CAAkBE,QAAlB,IAA8BI,IAA9B;AACA,aAAO,IAAP;AACH;;;sCAEiC;AAC9B,WAAKL,KAAL,GAAa,IAAb;AACA,aAAO,IAAP;AACH;;;4BAEuB;AACpB,aAAO,IAAIM,cAAJ,CAAmB,KAAKJ,MAAL,IAAe,IAAlC,EAAwC,KAAKH,YAA7C,EAA2D,KAAKC,KAAhE,CAAP;AACH;;;;;;IAICM,c;AAIF,0BAAYJ,MAAZ,EAA4BG,IAA5B,EAAuCL,KAAvC,EAAuD;AAAA;;AACnD,SAAKO,EAAL,GAAU,IAAIC,oBAAJ,CAAY;AAClBR,MAAAA,KAAK,EAALA,KADkB;AAElBS,MAAAA,YAAY,EAAE;AAFI,KAAZ,CAAV;;AAKA,SAAK,IAAIC,GAAT,IAAgBL,IAAhB,EAAsB;AAClB,WAAKE,EAAL,CAAQI,eAAR,CAAwBD,GAAxB,EAA6B,UAA7B,EAAyCL,IAAI,CAACK,GAAD,CAA7C;AACH;;AAED,SAAKH,EAAL,CAAQK,SAAR,CAAkBV,MAAlB;AACH;;;;0CAE6BW,U,EAAoBC,I,EAAsB;AACpE,aAAOD,UAAU,CAACT,OAAX,CAAmB,aAAnB,EAAkC,UAACW,CAAD,EAAIC,CAAJ,EAAU;AAC/C,YAAMC,CAAC,GAAGH,IAAI,CAACE,CAAD,CAAd;;AACA,YAAI,OAAOC,CAAP,KAAa,QAAb,IAAyB,OAAOA,CAAP,KAAa,QAA1C,EAAoD;AAChD,iBAAOA,CAAC,CAACC,QAAF,EAAP;AACH,SAFD,MAEO;AACH,iBAAOH,CAAP;AACH;AACJ,OAPM,CAAP;AAQH;;;4BAEOI,Q,EAAqD;AAAA,UAAnCC,YAAmC,uEAAZ,EAAY;AACzD,aAAO,KAAKC,qBAAL,CACH,KAAKd,EAAL,CAAQe,OAAR,CAAgBH,QAAhB,CADG,EAEHC,YAFG,CAAP;AAIH;;;6BAEQG,Q,EAAkBC,M,EAAgBC,K,EAAkD;AAAA,UAAnCL,YAAmC,uEAAZ,EAAY;AACzF,aAAO,KAAKC,qBAAL,CACH,KAAKd,EAAL,CAAQmB,QAAR,CAAiBH,QAAjB,EAA2BC,MAA3B,EAAmCC,KAAnC,EAA0CrB,OAA1C,CAAkD,KAAlD,EAAyDqB,KAAK,CAACP,QAAN,EAAzD,CADG,EAEHE,YAFG,CAAP;AAIH;;;;;;AAIE,SAASO,iBAAT,GAA6B;AAChC,SAAO,IAAI7B,cAAJ,EAAP;AACH","sourcesContent":["import GetText from \"node-gettext\"\n\nimport { getLanguage } from \".\"\n\nclass GettextBuilder {\n\n    private locale?: string\n    private translations = {}\n    private debug = false\n\n    setLanguage(language: string): GettextBuilder {\n        this.locale = language\n        return this\n    }\n\n    detectLocale(): GettextBuilder {\n        return this.setLanguage(getLanguage().replace('-', '_'))\n    }\n\n    addTranslation(language: string, data: any): GettextBuilder {\n        this.translations[language] = data\n        return this\n    }\n\n    enableDebugMode(): GettextBuilder {\n        this.debug = true\n        return this\n    }\n\n    build(): GettextWrapper {\n        return new GettextWrapper(this.locale || 'en', this.translations, this.debug)\n    }\n\n}\n\nclass GettextWrapper {\n\n    private gt: GetText\n\n    constructor(locale: string, data: any, debug: boolean) {\n        this.gt = new GetText({\n            debug,\n            sourceLocale: 'en',\n        })\n\n        for (let key in data) {\n            this.gt.addTranslations(key, 'messages', data[key])\n        }\n\n        this.gt.setLocale(locale)\n    }\n\n    private subtitudePlaceholders(translated: string, vars: object): string {\n        return translated.replace(/{([^{}]*)}/g, (a, b) => {\n            const r = vars[b]\n            if (typeof r === 'string' || typeof r === 'number') {\n                return r.toString()\n            } else {\n                return a\n            }\n        })\n    }\n\n    gettext(original: string, placeholders: object = {}): string {\n        return this.subtitudePlaceholders(\n            this.gt.gettext(original),\n            placeholders\n        )\n    }\n\n    ngettext(singular: string, plural: string, count: number, placeholders: object = {}): string {\n        return this.subtitudePlaceholders(\n            this.gt.ngettext(singular, plural, count).replace(/%n/g, count.toString()),\n            placeholders\n        )\n    }\n\n}\n\nexport function getGettextBuilder() {\n    return new GettextBuilder()\n}\n"],"file":"gettext.js"}